import React, {
  Context,
  createContext,
  useContext,
  useEffect,
  useState,
} from 'react';

import { client } from '../client';
import { PluginInstance, WbElementColumns, WbElementData } from '../types';

const Context = createContext<PluginInstance<any>>(client);

export function SigmaClientProvider(props: {
  client: PluginInstance<any>;
  children?: React.ReactChildren;
}) {
  return (
    <Context.Provider value={props.client}>{props.children}</Context.Provider>
  );
}

export function usePlugin(): PluginInstance<any> {
  return useContext(Context);
}

export function useElementColumns(id: string): WbElementColumns {
  const client = usePlugin();
  const [columns, setColumns] = useState<WbElementColumns>({});
  useEffect(() => {
    if (id) {
      return client.elements.subscribeToElementColumns(id, setColumns);
    }
  }, [id]);
  return columns;
}

export function useElementData(id: string): WbElementData {
  const client = usePlugin();
  const [data, setData] = useState<WbElementData>({});
  useEffect(() => {
    if (id) return client.elements.subscribeToElementData(id, setData);
  }, [id]);
  return data;
}

export function useConfig(key: string): any {
  const client = usePlugin();
  const [config, setConfig] = useState<any>(
    key != null ? client.config.getKey(key) : client.config.get(),
  );
  useEffect(
    () =>
      client.config.subscribe(newConfig => {
        if (key != null && newConfig[key] !== config[key]) {
          setConfig(newConfig[key]);
        } else {
          setConfig(newConfig);
        }
      }),
    [],
  );
  return config;
}
