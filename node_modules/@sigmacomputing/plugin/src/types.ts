export type ScalarType = 'boolean' | 'datetime' | 'number' | 'integer' | 'text';
export type PrimitiveType = ScalarType | 'variant' | 'link';
export type ValueType = PrimitiveType | 'error';
export interface PluginConfig<T> {
  id: string;
  config: T;
  [key: string]: any;
}

export type PluginMessageResponse = MessageEvent<{
  type: string;
  result: any[];
  error: any;
}>;

export interface WbElement {
  id: string;
}
export interface WbElementData {
  [colId: string]: any[];
}

export interface WbElementColumn {
  id: string;
  name: string;
  columnType: ValueType;
}
export interface WbElementColumns {
  [colId: string]: WbElementColumn;
}

export type Unsubscriber = () => void;

export type CustomPluginConfigOptions =
  | {
      type: 'group';
      name: string;
      label?: string;
    }
  | {
      type: 'element';
      name: string;
      label?: string;
    }
  | {
      type: 'column';
      name: string;
      label?: string;
      source: string;
      allowMultiple: boolean;
    }
  | {
      type: 'text';
      name: string;
      label?: string;
      source?: string; // can point to a group or element config
      // if true will omit from prehydrated configs passed through querystring
      secure?: boolean;
      multiline?: boolean;
      placeholder?: string;
      defaultValue?: string;
    };
export interface PluginInstance<T> {
  sigmaEnv: 'author' | 'viewer' | 'explorer';
  config: {
    get(): Partial<T> | undefined;
    set(config: Partial<T>): void;
    getKey<K extends keyof T>(key: K): Pick<T, K>;
    setKey<K extends keyof T>(key: K, value: Pick<T, K>): void;
    subscribe(listener: (arg0: T) => void): Unsubscriber;
    configureEditorPanel(options: CustomPluginConfigOptions[]): void;
  };
  elements: {
    getElementColumns(id: string): Promise<WbElementColumns>;
    subscribeToElementColumns(
      id: string,
      callback: (cols: WbElementColumns) => void,
    ): Unsubscriber;
    subscribeToElementData(
      id: string,
      callback: (data: WbElementData) => void,
    ): Unsubscriber;
  };
  destroy(): void;
}
