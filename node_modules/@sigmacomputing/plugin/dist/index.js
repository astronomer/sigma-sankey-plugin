"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = exports.initialize = void 0;
var initialize_1 = require("./initialize");
Object.defineProperty(exports, "initialize", { enumerable: true, get: function () { return initialize_1.initialize; } });
var client_1 = require("./client");
Object.defineProperty(exports, "client", { enumerable: true, get: function () { return client_1.client; } });
__exportStar(require("./types"), exports);
/* Ideally we want this to be tree-shakeable.
 * Node 12 added support for `exports` in package.json,
 * however typescript does not yet support this.
 * Tracked: https://github.com/microsoft/TypeScript/issues/33079
 */
__exportStar(require("./react"), exports);
