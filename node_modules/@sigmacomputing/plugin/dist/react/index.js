"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConfig = exports.useElementData = exports.useElementColumns = exports.usePlugin = exports.SigmaClientProvider = void 0;
const react_1 = __importStar(require("react"));
const client_1 = require("../client");
const Context = react_1.createContext(client_1.client);
function SigmaClientProvider(props) {
    return (react_1.default.createElement(Context.Provider, { value: props.client }, props.children));
}
exports.SigmaClientProvider = SigmaClientProvider;
function usePlugin() {
    return react_1.useContext(Context);
}
exports.usePlugin = usePlugin;
function useElementColumns(id) {
    const client = usePlugin();
    const [columns, setColumns] = react_1.useState({});
    react_1.useEffect(() => {
        if (id) {
            return client.elements.subscribeToElementColumns(id, setColumns);
        }
    }, [id]);
    return columns;
}
exports.useElementColumns = useElementColumns;
function useElementData(id) {
    const client = usePlugin();
    const [data, setData] = react_1.useState({});
    react_1.useEffect(() => {
        if (id)
            return client.elements.subscribeToElementData(id, setData);
    }, [id]);
    return data;
}
exports.useElementData = useElementData;
function useConfig(key) {
    const client = usePlugin();
    const [config, setConfig] = react_1.useState(key != null ? client.config.getKey(key) : client.config.get());
    react_1.useEffect(() => client.config.subscribe(newConfig => {
        if (key != null && newConfig[key] !== config[key]) {
            setConfig(newConfig[key]);
        }
        else {
            setConfig(newConfig);
        }
    }), []);
    return config;
}
exports.useConfig = useConfig;
