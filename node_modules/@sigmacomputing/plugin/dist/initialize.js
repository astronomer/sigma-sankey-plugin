"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialize = void 0;
function initialize() {
    const pluginConfig = {
        config: {},
    };
    const listeners = {};
    for (const [key, value] of new URL(document.location.toString()).searchParams.entries())
        pluginConfig[key] = JSON.parse(value);
    const listener = (e) => {
        emit(e.data.type, e.data.result, e.data.error);
    };
    window.addEventListener('message', listener, false);
    on('wb:plugin:config:update', (config) => {
        var _a;
        Object.assign(pluginConfig, config);
        emit('config', (_a = pluginConfig.config) !== null && _a !== void 0 ? _a : {});
    });
    // send initialize event
    void execPromise('wb:plugin:init').then(config => {
        Object.assign(pluginConfig, config);
        emit('init', pluginConfig);
        emit('config', pluginConfig.config);
    });
    function on(event, listener) {
        listeners[event] = listeners[event] || [];
        listeners[event].push(listener);
    }
    function off(event, listener) {
        if (listeners[event] == null)
            return;
        listeners[event] = listeners[event].filter(a => a !== listener);
    }
    function emit(event, ...args) {
        Object.values(listeners[event] || []).forEach(fn => fn(...args));
    }
    function execPromise(event, ...args) {
        return new Promise((resolve, reject) => {
            var _a;
            const callback = (data, error) => {
                if (error)
                    reject(error);
                else
                    resolve(data);
                off(event, callback);
            };
            on(event, callback);
            window.parent.postMessage({ type: event, args, elementId: pluginConfig.id }, (_a = pluginConfig === null || pluginConfig === void 0 ? void 0 : pluginConfig.wbOrigin) !== null && _a !== void 0 ? _a : '*');
        });
    }
    return {
        get sigmaEnv() {
            return pluginConfig.sigmaEnv;
        },
        config: {
            getKey(key) {
                var _a;
                return (_a = pluginConfig === null || pluginConfig === void 0 ? void 0 : pluginConfig.config) === null || _a === void 0 ? void 0 : _a[key];
            },
            get() {
                return pluginConfig.config;
            },
            set(partialConfig) {
                void execPromise('wb:plugin:config:update', partialConfig);
            },
            setKey(key, value) {
                void execPromise('wb:plugin:config:update', {
                    [key]: value,
                });
            },
            subscribe(listener) {
                on('config', listener);
                return () => off('config', listener);
            },
            configureEditorPanel(options) {
                void execPromise('wb:plugin:config:inspector', options);
            },
        },
        elements: {
            getElementColumns(id) {
                return execPromise('wb:plugin:element:columns:get', id);
            },
            subscribeToElementColumns(id, callback) {
                const eventName = `wb:plugin:element:${id}:columns`;
                on(eventName, callback);
                void execPromise('wb:plugin:element:subscribe:columns', id);
                return () => {
                    off(eventName, callback);
                    void execPromise('wb:plugin:element:unsubscribe:columns', id);
                };
            },
            subscribeToElementData(id, callback) {
                const eventName = `wb:plugin:element:${id}:data`;
                on(eventName, callback);
                void execPromise('wb:plugin:element:subscribe:data', id);
                return () => {
                    off(eventName, callback);
                    void execPromise('wb:plugin:element:unsubscribe:data', id);
                };
            },
        },
        destroy: function () {
            Object.keys(listeners).forEach(event => delete listeners[event]);
            window.removeEventListener('message', listener, false);
        },
    };
}
exports.initialize = initialize;
