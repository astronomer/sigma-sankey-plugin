{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Flow } from \"./Flow\";\nimport { chord, ribbon } from \"d3-chord\";\nimport { ascending, descending } from \"d3\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { ChordNodes } from \"./ChordNodes\";\nimport { ChordLink } from \"./ChordLink\";\nimport { p100, p50 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n/**\r\n * Regular chord series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/flow-charts/} for more information\r\n * @important\r\n */\n\nvar Chord =\n/** @class */\nfunction (_super) {\n  __extends(Chord, _super);\n\n  function Chord() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * List of link elements.\r\n     *\r\n     * @default new ListTemplate<ChordLink>\r\n     */\n\n\n    Object.defineProperty(_this, \"links\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return ChordLink._new(_this._root, {\n          themeTags: [\"link\", \"shape\"]\n        }, [_this.links.template]);\n      })\n    });\n    /**\r\n     * A series for all chord nodes.\r\n     *\r\n     * @default ChordNodes.new()\r\n     */\n\n    Object.defineProperty(_this, \"nodes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this.children.push(ChordNodes.new(_this._root, {}))\n    });\n    Object.defineProperty(_this, \"_d3chord\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: chord()\n    });\n    Object.defineProperty(_this, \"_chordLayout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(_this, \"_ribbon\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: ribbon()\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Chord.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"chord\"]);\n      this.linksContainer.setAll({\n        x: p50,\n        y: p50\n      });\n      this.bulletsContainer.setAll({\n        x: p50,\n        y: p50\n      });\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(Chord.prototype, \"_fixRibbon\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (ribbon) {\n      var _this = this;\n\n      ribbon.startAngle(function (d) {\n        return d.startAngle + _this.get(\"startAngle\", 0) * $math.RADIANS + Math.PI / 2;\n      });\n      ribbon.endAngle(function (d) {\n        return d.endAngle + _this.get(\"startAngle\", 0) * $math.RADIANS + Math.PI / 2;\n      });\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Chord.prototype, \"makeLink\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var link = this.linksContainer.children.push(this.links.make());\n      this.links.push(link);\n\n      link._setDataItem(dataItem);\n\n      link.set(\"source\", dataItem.get(\"source\"));\n      link.set(\"target\", dataItem.get(\"target\"));\n      link.series = this;\n      return link;\n    }\n  });\n  Object.defineProperty(Chord.prototype, \"_makeMatrix\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var matrix = [];\n      $array.each(this.nodes.dataItems, function (sourceDataItem) {\n        var group = [];\n        matrix.push(group);\n        var outgoing = sourceDataItem.get(\"outgoingLinks\");\n        $array.each(_this.nodes.dataItems, function (targetDataItem) {\n          var value = 0;\n\n          if (outgoing) {\n            $array.each(outgoing, function (outgoingLink) {\n              if (outgoingLink.get(\"target\") === targetDataItem) {\n                value = outgoingLink.get(\"valueWorking\");\n              }\n\n              var valueSum = _this.getPrivate(\"valueSum\", 0);\n\n              var minSize = _this.get(\"minSize\", 0);\n\n              if (value > 0 && minSize > 0) {\n                if (value < valueSum * minSize) {\n                  value = valueSum * minSize;\n                }\n              }\n            });\n          }\n\n          group.push(value);\n        });\n      });\n      return matrix;\n    }\n  });\n  Object.defineProperty(Chord.prototype, \"_prepareChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._prepareChildren.call(this);\n\n      this._fixRibbon(this._ribbon);\n\n      var chordChanged = false;\n\n      if (this._valuesDirty || this._sizeDirty || this.isDirty(\"padAngle\") || this.isDirty(\"startAngle\")) {\n        var matrix = this._makeMatrix();\n\n        this._d3chord.padAngle(this.get(\"padAngle\", 0) * $math.RADIANS);\n\n        var sort = this.get(\"sort\");\n\n        if (sort === \"ascending\") {\n          this._d3chord.sortGroups(ascending);\n        } else if (sort === \"descending\") {\n          this._d3chord.sortGroups(descending);\n        }\n        /*\r\n                    this._d3chord.sortSubgroups((a, b)=>{\r\n                        if (a != Math.round(a)) return false\r\n                        if (b != Math.round(b)) return true\r\n                        return b < a ? -1 : b > a ? 1 : 0;\r\n                    })\r\n        */\n\n\n        this._chordLayout = this._d3chord(matrix);\n        chordChanged = true;\n      }\n\n      if (chordChanged || this.isDirty(\"radius\") || this.isDirty(\"nodeWidth\")) {\n        var radius_1 = $utils.relativeToValue(this.get(\"radius\", 0), Math.min(this.innerWidth(), this.innerHeight())) / 2;\n        var i_1 = 0;\n        var chordStartAngle_1 = this.get(\"startAngle\", 0);\n        var nodeWidth_1 = this.get(\"nodeWidth\", 0);\n        $array.each(this.nodes.dataItems, function (dataItem) {\n          var slice = dataItem.get(\"slice\");\n          var chordGroup = _this._chordLayout.groups[i_1];\n          var startAngle = chordGroup.startAngle * $math.DEGREES + chordStartAngle_1;\n          var endAngle = chordGroup.endAngle * $math.DEGREES + chordStartAngle_1;\n          slice.setAll({\n            radius: radius_1,\n            innerRadius: radius_1 - nodeWidth_1,\n            startAngle: startAngle,\n            arc: endAngle - startAngle\n          });\n          var label = dataItem.get(\"label\");\n          label.setAll({\n            labelAngle: startAngle + (endAngle - startAngle) / 2\n          });\n          label.setPrivate(\"radius\", radius_1);\n          label.setPrivate(\"innerRadius\", 0.1);\n          i_1++;\n        });\n        var linkRadius_1 = radius_1 - this.get(\"nodeWidth\", 0);\n        $array.each(this._chordLayout, function (chord) {\n          var dataItem = _this._linksByIndex[chord.source.index + \"_\" + chord.target.index];\n\n          if (!dataItem) {\n            dataItem = _this._linksByIndex[chord.target.index + \"_\" + chord.source.index];\n          }\n\n          if (dataItem) {\n            var link = dataItem.get(\"link\");\n\n            _this._getLinkPoints(link, linkRadius_1, chord);\n\n            _this._updateLink(_this._ribbon, link, linkRadius_1, chord);\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(Chord.prototype, \"_getLinkPoints\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (link, linkRadius, chordLayoutItem) {\n      var source = chordLayoutItem.source;\n      var target = chordLayoutItem.target;\n      var chordStartAngle = this.get(\"startAngle\", 0) * $math.RADIANS;\n\n      if (source && target) {\n        var startAngle0 = source.startAngle;\n        var endAngle0 = source.endAngle;\n        var angle0 = startAngle0 + (endAngle0 - startAngle0) / 2 + chordStartAngle;\n        var startAngle1 = target.startAngle;\n        var endAngle1 = target.endAngle;\n        var angle1 = startAngle1 + (endAngle1 - startAngle1) / 2 + chordStartAngle;\n        link._p0 = {\n          x: linkRadius * Math.cos(angle0),\n          y: linkRadius * Math.sin(angle0)\n        };\n        link._p1 = {\n          x: linkRadius * Math.cos(angle1),\n          y: linkRadius * Math.sin(angle1)\n        };\n      }\n    }\n  });\n  Object.defineProperty(Chord.prototype, \"_updateLink\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (ribbon, link, linkRadius, chordLayoutItem) {\n      if (chordLayoutItem) {\n        ribbon.sourceRadius($utils.relativeToValue(link.get(\"sourceRadius\", p100), linkRadius));\n        ribbon.targetRadius($utils.relativeToValue(link.get(\"targetRadius\", p100), linkRadius));\n        link.set(\"draw\", function (display) {\n          ribbon.context(display);\n          ribbon(chordLayoutItem);\n        });\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(Chord.prototype, \"disposeDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype.disposeDataItem.call(this, dataItem);\n\n      var label = dataItem.get(\"label\");\n\n      if (label) {\n        label.dispose();\n      }\n    }\n  });\n  Object.defineProperty(Chord, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Chord\"\n  });\n  Object.defineProperty(Chord, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Flow.classNames.concat([Chord.className])\n  });\n  return Chord;\n}(Flow);\n\nexport { Chord };","map":{"version":3,"sources":["../../../../../src/.internal/charts/flow/Chord.ts"],"names":[],"mappings":";AAGA,SAAS,IAAT,QAA8E,QAA9E;AACA,SAAS,KAAT,EAAgB,MAAhB,QAAuE,UAAvE;AACA,SAAS,SAAT,EAAoB,UAApB,QAAsC,IAAtC;AACA,SAAS,QAAT,QAAyB,0BAAzB;AACA,SAAS,YAAT,QAA6B,sBAA7B;AACA,SAAS,UAAT,QAAgD,cAAhD;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAkB,IAAlB,EAAwB,GAAxB,QAAmC,yBAAnC;AAEA,OAAO,KAAK,MAAZ,MAAwB,uBAAxB;AACA,OAAO,KAAK,MAAZ,MAAwB,uBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,sBAAvB;AA2EA;;;;;AAKG;;AACH,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA;;AAA3B,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AAKC;;;;AAIG;;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAiD,IAAI,YAAJ,CAChD,QAAQ,CAAC,GAAT,CAAa,EAAb,CADgD,EAEhD,YAAA;AAAM,eAAA,SAAS,CAAC,IAAV,CAAe,KAAI,CAAC,KAApB,EAA2B;AAAE,UAAA,SAAS,EAAE,CAAC,MAAD,EAAS,OAAT;AAAb,SAA3B,EAA6D,CAAC,KAAI,CAAC,KAAL,CAA9D,QAA6D,CAA7D,CAAA;AAAmF,OAFzC;AAAjD,KAAA;AAKA;;;;AAIG;;AACH,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAoC,KAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,UAAU,CAAC,GAAX,CAAe,KAAI,CAAC,KAApB,EAA2B,EAA3B,CAAnB;AAApC,KAAA;AAOA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,UAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAkB,KAAK;AAAvB,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,cAAA,EAAA;sBAAA;wBAAA;oBAAA;aAA4L;AAA5L,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,SAAA,EAAA;sBAAA;wBAAA;oBAAA;aAAiB,MAAM;AAAvB,KAAA;;AAkLA;;;;;;WAhLA,YAAA;AACC,WAAK,SAAL,CAAe,SAAf,GAA2B,MAAM,CAAC,SAAP,CAAiB,KAAK,SAAL,CAAe,SAAhC,EAA2C,CAAC,OAAD,CAA3C,CAA3B;AACA,WAAK,cAAL,CAAoB,MAApB,CAA2B;AAAE,QAAA,CAAC,EAAE,GAAL;AAAU,QAAA,CAAC,EAAE;AAAb,OAA3B;AACA,WAAK,gBAAL,CAAsB,MAAtB,CAA6B;AAAE,QAAA,CAAC,EAAE,GAAL;AAAU,QAAA,CAAC,EAAE;AAAb,OAA7B;;AACA,MAAA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;AACA;;;;;;WAED,UAAqB,MAArB,EAAyE;AAAzE,UAAA,KAAA,GAAA,IAAA;;AACC,MAAA,MAAM,CAAC,UAAP,CAAkB,UAAC,CAAD,EAAE;AACnB,eAAO,CAAC,CAAC,UAAF,GAAe,KAAI,CAAC,GAAL,CAAS,YAAT,EAAuB,CAAvB,IAA4B,KAAK,CAAC,OAAjD,GAA2D,IAAI,CAAC,EAAL,GAAU,CAA5E;AACA,OAFD;AAIA,MAAA,MAAM,CAAC,QAAP,CAAgB,UAAC,CAAD,EAAE;AACjB,eAAO,CAAC,CAAC,QAAF,GAAa,KAAI,CAAC,GAAL,CAAS,YAAT,EAAuB,CAAvB,IAA4B,KAAK,CAAC,OAA/C,GAAyD,IAAI,CAAC,EAAL,GAAU,CAA1E;AACA,OAFD;AAGA;;AAED;;AAEG;;;;;;WACH,UAAgB,QAAhB,EAA6D;AAC5D,UAAM,IAAI,GAAG,KAAK,cAAL,CAAoB,QAApB,CAA6B,IAA7B,CAAkC,KAAK,KAAL,CAAW,IAAX,EAAlC,CAAb;AACA,WAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB;;AACA,MAAA,IAAI,CAAC,YAAL,CAAkB,QAAlB;;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,QAAQ,CAAC,GAAT,CAAa,QAAb,CAAnB;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,QAAQ,CAAC,GAAT,CAAa,QAAb,CAAnB;AACA,MAAA,IAAI,CAAC,MAAL,GAAc,IAAd;AACA,aAAO,IAAP;AACA;;;;;;WAED,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACC,UAAM,MAAM,GAAe,EAA3B;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,KAAK,KAAL,CAAW,SAAvB,EAAkC,UAAC,cAAD,EAAe;AAChD,YAAM,KAAK,GAAa,EAAxB;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACA,YAAI,QAAQ,GAAG,cAAc,CAAC,GAAf,CAAmB,eAAnB,CAAf;AAEA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAI,CAAC,KAAL,CAAW,SAAvB,EAAkC,UAAC,cAAD,EAAe;AAChD,cAAI,KAAK,GAAG,CAAZ;;AACA,cAAI,QAAJ,EAAc;AACb,YAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,UAAC,YAAD,EAAa;AAClC,kBAAI,YAAY,CAAC,GAAb,CAAiB,QAAjB,MAA+B,cAAnC,EAAmD;AAClD,gBAAA,KAAK,GAAG,YAAY,CAAC,GAAb,CAAiB,cAAjB,CAAR;AACA;;AAED,kBAAI,QAAQ,GAAG,KAAI,CAAC,UAAL,CAAgB,UAAhB,EAA4B,CAA5B,CAAf;;AACA,kBAAI,OAAO,GAAG,KAAI,CAAC,GAAL,CAAS,SAAT,EAAoB,CAApB,CAAd;;AACA,kBAAG,KAAK,GAAG,CAAR,IAAa,OAAO,GAAG,CAA1B,EAA4B;AAC3B,oBAAG,KAAK,GAAG,QAAQ,GAAG,OAAtB,EAA8B;AAC7B,kBAAA,KAAK,GAAG,QAAQ,GAAG,OAAnB;AACA;AACD;AACD,aAZD;AAaA;;AAED,UAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,SAnBD;AAoBA,OAzBD;AA0BA,aAAO,MAAP;AACA;;;;;;WAED,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,gBAAN,CAAsB,IAAtB,CAAsB,IAAtB;;AAEA,WAAK,UAAL,CAAgB,KAAK,OAArB;;AAEA,UAAI,YAAY,GAAG,KAAnB;;AAEA,UAAI,KAAK,YAAL,IAAqB,KAAK,UAA1B,IAAwC,KAAK,OAAL,CAAa,UAAb,CAAxC,IAAoE,KAAK,OAAL,CAAa,YAAb,CAAxE,EAAoG;AAEnG,YAAM,MAAM,GAAG,KAAK,WAAL,EAAf;;AAEA,aAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,GAAL,CAAS,UAAT,EAAqB,CAArB,IAA0B,KAAK,CAAC,OAAvD;;AACA,YAAM,IAAI,GAAG,KAAK,GAAL,CAAS,MAAT,CAAb;;AAEA,YAAI,IAAI,KAAK,WAAb,EAA0B;AACzB,eAAK,QAAL,CAAc,UAAd,CAAyB,SAAzB;AACA,SAFD,MAGK,IAAI,IAAI,KAAK,YAAb,EAA2B;AAC/B,eAAK,QAAL,CAAc,UAAd,CAAyB,UAAzB;AACA;AACJ;;;;;;AAME;;;AACC,aAAK,YAAL,GAAoB,KAAK,QAAL,CAAc,MAAd,CAApB;AAEA,QAAA,YAAY,GAAG,IAAf;AACA;;AAED,UAAI,YAAY,IAAI,KAAK,OAAL,CAAa,QAAb,CAAhB,IAA0C,KAAK,OAAL,CAAa,WAAb,CAA9C,EAAyE;AACxE,YAAI,QAAM,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAK,GAAL,CAAS,QAAT,EAAmB,CAAnB,CAAvB,EAA8C,IAAI,CAAC,GAAL,CAAS,KAAK,UAAL,EAAT,EAA4B,KAAK,WAAL,EAA5B,CAA9C,IAAiG,CAA9G;AAEA,YAAI,GAAC,GAAG,CAAR;AAEA,YAAM,iBAAe,GAAG,KAAK,GAAL,CAAS,YAAT,EAAuB,CAAvB,CAAxB;AACA,YAAM,WAAS,GAAG,KAAK,GAAL,CAAS,WAAT,EAAsB,CAAtB,CAAlB;AAEA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAK,KAAL,CAAW,SAAvB,EAAkC,UAAC,QAAD,EAAS;AAC1C,cAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,OAAb,CAAd;AACA,cAAM,UAAU,GAAI,KAAI,CAAC,YAAL,CAA0B,MAA1B,CAAiC,GAAjC,CAApB;AACA,cAAM,UAAU,GAAG,UAAU,CAAC,UAAX,GAAwB,KAAK,CAAC,OAA9B,GAAwC,iBAA3D;AACA,cAAM,QAAQ,GAAG,UAAU,CAAC,QAAX,GAAsB,KAAK,CAAC,OAA5B,GAAsC,iBAAvD;AACA,UAAA,KAAK,CAAC,MAAN,CAAa;AAAE,YAAA,MAAM,EAAE,QAAV;AAAkB,YAAA,WAAW,EAAE,QAAM,GAAG,WAAxC;AAAmD,YAAA,UAAU,EAAE,UAA/D;AAAqF,YAAA,GAAG,EAAE,QAAQ,GAAG;AAArG,WAAb;AAEA,cAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,OAAb,CAAd;AACA,UAAA,KAAK,CAAC,MAAN,CAAa;AAAE,YAAA,UAAU,EAAE,UAAU,GAAG,CAAC,QAAQ,GAAG,UAAZ,IAA0B;AAArD,WAAb;AACA,UAAA,KAAK,CAAC,UAAN,CAAiB,QAAjB,EAA2B,QAA3B;AACA,UAAA,KAAK,CAAC,UAAN,CAAiB,aAAjB,EAAgC,GAAhC;AACA,UAAA,GAAC;AACD,SAZD;AAcA,YAAM,YAAU,GAAG,QAAM,GAAG,KAAK,GAAL,CAAS,WAAT,EAAsB,CAAtB,CAA5B;AAEA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAK,YAAjB,EAA+B,UAAC,KAAD,EAAM;AAEpC,cAAI,QAAQ,GAAG,KAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,MAAN,CAAa,KAAb,GAAqB,GAArB,GAA2B,KAAK,CAAC,MAAN,CAAa,KAA3D,CAAf;;AAEA,cAAI,CAAC,QAAL,EAAe;AACd,YAAA,QAAQ,GAAG,KAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,MAAN,CAAa,KAAb,GAAqB,GAArB,GAA2B,KAAK,CAAC,MAAN,CAAa,KAA3D,CAAX;AACA;;AAED,cAAI,QAAJ,EAAc;AACb,gBAAM,IAAI,GAAG,QAAQ,CAAC,GAAT,CAAa,MAAb,CAAb;;AACA,YAAA,KAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,YAA1B,EAAsC,KAAtC;;AACA,YAAA,KAAI,CAAC,WAAL,CAAiB,KAAI,CAAC,OAAtB,EAA+B,IAA/B,EAAqC,YAArC,EAAiD,KAAjD;AACA;AACD,SAbD;AAcA;AACD;;;;;;WAED,UAAyB,IAAzB,EAA0C,UAA1C,EAA8D,eAA9D,EAAkF;AACjF,UAAM,MAAM,GAAG,eAAe,CAAC,MAA/B;AACA,UAAM,MAAM,GAAG,eAAe,CAAC,MAA/B;AAEA,UAAM,eAAe,GAAG,KAAK,GAAL,CAAS,YAAT,EAAuB,CAAvB,IAA4B,KAAK,CAAC,OAA1D;;AAEA,UAAI,MAAM,IAAI,MAAd,EAAsB;AACrB,YAAM,WAAW,GAAG,MAAM,CAAC,UAA3B;AACA,YAAM,SAAS,GAAG,MAAM,CAAC,QAAzB;AACA,YAAM,MAAM,GAAG,WAAW,GAAG,CAAC,SAAS,GAAG,WAAb,IAA4B,CAA1C,GAA8C,eAA7D;AAEA,YAAM,WAAW,GAAG,MAAM,CAAC,UAA3B;AACA,YAAM,SAAS,GAAG,MAAM,CAAC,QAAzB;AACA,YAAM,MAAM,GAAG,WAAW,GAAG,CAAC,SAAS,GAAG,WAAb,IAA4B,CAA1C,GAA8C,eAA7D;AAEA,QAAA,IAAI,CAAC,GAAL,GAAW;AAAE,UAAA,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,CAAlB;AAAoC,UAAA,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT;AAApD,SAAX;AACA,QAAA,IAAI,CAAC,GAAL,GAAW;AAAE,UAAA,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,CAAlB;AAAoC,UAAA,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT;AAApD,SAAX;AACA;AACD;;;;;;WAED,UAAsB,MAAtB,EAA4E,IAA5E,EAA6F,UAA7F,EAAiH,eAAjH,EAAqI;AACpI,UAAI,eAAJ,EAAqB;AACpB,QAAA,MAAM,CAAC,YAAP,CAAoB,MAAM,CAAC,eAAP,CAAuB,IAAI,CAAC,GAAL,CAAS,cAAT,EAAyB,IAAzB,CAAvB,EAAuD,UAAvD,CAApB;AACA,QAAA,MAAM,CAAC,YAAP,CAAoB,MAAM,CAAC,eAAP,CAAuB,IAAI,CAAC,GAAL,CAAS,cAAT,EAAyB,IAAzB,CAAvB,EAAuD,UAAvD,CAApB;AAEA,QAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,UAAC,OAAD,EAAQ;AACxB,UAAA,MAAM,CAAC,OAAP,CAAe,OAAf;AACA,UAAA,MAAM,CAAC,eAAD,CAAN;AACA,SAHD;AAIA;AACD;;AAED;;AAEG;;;;;;WACH,UAAuB,QAAvB,EAAoE;AACnE,MAAA,MAAA,CAAA,SAAA,CAAM,eAAN,CAAqB,IAArB,CAAqB,IAArB,EAAsB,QAAtB;;AACA,UAAI,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,OAAb,CAAZ;;AACA,UAAI,KAAJ,EAAW;AACV,QAAA,KAAK,CAAC,OAAN;AACA;AACD;;AA5MD,EAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,IAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,CAAC,KAAK,CAAC,SAAP,CAAvB;AAA1C,GAAA;AA4MD,SAAA,KAAA;AAAC,CA/MD,CAA2B,IAA3B,CAAA;;SAAa,K","sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { RadialLabel } from \"../../core/render/RadialLabel\";\n\nimport { Flow, IFlowSettings, IFlowDataItem, IFlowPrivate, IFlowEvents } from \"./Flow\";\nimport { chord, ribbon, RibbonGenerator, RibbonSubgroup, Ribbon } from \"d3-chord\";\nimport { ascending, descending } from \"d3\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { ChordNodes, IChordNodesDataItem } from \"./ChordNodes\";\nimport { ChordLink } from \"./ChordLink\";\nimport { Percent, p100, p50 } from \"../../core/util/Percent\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IChordDataItem extends IFlowDataItem {\n\n\t/**\n\t * A link element.\n\t */\n\tlink: ChordLink;\n\n\t/**\n\t * A label element.\n\t */\n\tlabel: RadialLabel;\n\n\t/**\n\t * Source node data item.\n\t */\n\tsource: DataItem<IChordNodesDataItem>;\n\n\t/**\n\t * Target node data item.\n\t */\n\ttarget: DataItem<IChordNodesDataItem>;\n\n}\n\nexport interface IChordSettings extends IFlowSettings {\n\n\t/**\n\t * Angle of a gap between each node, in degrees.\n\t *\n\t * @default 1\n\t */\n\tpadAngle?: number;\n\n\t/**\n\t * Radius of the diagram in percent or pixels.\n\t *\n\t * If set in percent, it will be relative to the whole area available for\n\t * the series.\n\t *\n\t * @default 90%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * The thickness of node strip in pixels.\n\t *\n\t * @default 10\n\t */\n\tnodeWidth?: number;\n\n\t/**\n\t * Starting angle in degrees.\n\t *\n\t * @default 0\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * How to sort nodes by their value.\n\t *\n\t * @default \"descending\"\n\t */\n\tsort?: \"ascending\" | \"descending\" | \"none\"\n\n}\n\nexport interface IChordPrivate extends IFlowPrivate {\n}\n\nexport interface IChordEvents extends IFlowEvents {\n}\n\n/**\n * Regular chord series.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/flow-charts/} for more information\n * @important\n */\nexport class Chord extends Flow {\n\n\tpublic static className: string = \"Chord\";\n\tpublic static classNames: Array<string> = Flow.classNames.concat([Chord.className]);\n\n\t/**\n\t * List of link elements.\n\t *\n\t * @default new ListTemplate<ChordLink>\n\t */\n\tpublic readonly links: ListTemplate<ChordLink> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => ChordLink._new(this._root, { themeTags: [\"link\", \"shape\"] }, [this.links.template])\n\t);\n\n\t/**\n\t * A series for all chord nodes.\n\t *\n\t * @default ChordNodes.new()\n\t */\n\tpublic readonly nodes: ChordNodes = this.children.push(ChordNodes.new(this._root, {}));\n\n\tdeclare public _settings: IChordSettings;\n\tdeclare public _privateSettings: IChordPrivate;\n\tdeclare public _dataItemSettings: IChordDataItem;\n\tdeclare public _events: IChordEvents;\n\n\tpublic _d3chord = chord();\n\tpublic _chordLayout: { source: { index: number, startAngle: number, endAngle: number, value: number }, target: { index: number, startAngle: number, endAngle: number, value: number } }[] = [];\n\tpublic _ribbon = ribbon();\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"chord\"]);\n\t\tthis.linksContainer.setAll({ x: p50, y: p50 })\n\t\tthis.bulletsContainer.setAll({ x: p50, y: p50 });\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _fixRibbon(ribbon: RibbonGenerator<any, Ribbon, RibbonSubgroup>) {\n\t\tribbon.startAngle((d) => {\n\t\t\treturn d.startAngle + this.get(\"startAngle\", 0) * $math.RADIANS + Math.PI / 2;\n\t\t})\n\n\t\tribbon.endAngle((d) => {\n\t\t\treturn d.endAngle + this.get(\"startAngle\", 0) * $math.RADIANS + Math.PI / 2;\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLink(dataItem: DataItem<this[\"_dataItemSettings\"]>): ChordLink {\n\t\tconst link = this.linksContainer.children.push(this.links.make());\n\t\tthis.links.push(link);\n\t\tlink._setDataItem(dataItem);\n\t\tlink.set(\"source\", dataItem.get(\"source\"));\n\t\tlink.set(\"target\", dataItem.get(\"target\"));\n\t\tlink.series = this;\n\t\treturn link;\n\t}\n\n\tprotected _makeMatrix(): number[][] {\n\t\tconst matrix: number[][] = [];\n\t\t$array.each(this.nodes.dataItems, (sourceDataItem) => {\n\t\t\tconst group: number[] = [];\n\t\t\tmatrix.push(group);\n\t\t\tlet outgoing = sourceDataItem.get(\"outgoingLinks\");\n\n\t\t\t$array.each(this.nodes.dataItems, (targetDataItem) => {\n\t\t\t\tlet value = 0;\n\t\t\t\tif (outgoing) {\n\t\t\t\t\t$array.each(outgoing, (outgoingLink) => {\n\t\t\t\t\t\tif (outgoingLink.get(\"target\") === targetDataItem) {\n\t\t\t\t\t\t\tvalue = outgoingLink.get(\"valueWorking\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet valueSum = this.getPrivate(\"valueSum\", 0);\n\t\t\t\t\t\tlet minSize = this.get(\"minSize\", 0);\n\t\t\t\t\t\tif(value > 0 && minSize > 0){\n\t\t\t\t\t\t\tif(value < valueSum * minSize){\n\t\t\t\t\t\t\t\tvalue = valueSum * minSize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tgroup.push(value);\n\t\t\t})\n\t\t})\n\t\treturn matrix;\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._fixRibbon(this._ribbon);\n\n\t\tlet chordChanged = false;\n\n\t\tif (this._valuesDirty || this._sizeDirty || this.isDirty(\"padAngle\") || this.isDirty(\"startAngle\")) {\n\n\t\t\tconst matrix = this._makeMatrix();\n\n\t\t\tthis._d3chord.padAngle(this.get(\"padAngle\", 0) * $math.RADIANS);\n\t\t\tconst sort = this.get(\"sort\");\n\n\t\t\tif (sort === \"ascending\") {\n\t\t\t\tthis._d3chord.sortGroups(ascending);\n\t\t\t}\n\t\t\telse if (sort === \"descending\") {\n\t\t\t\tthis._d3chord.sortGroups(descending);\n\t\t\t}\n/*\n\t\t\tthis._d3chord.sortSubgroups((a, b)=>{\n\t\t\t\tif (a != Math.round(a)) return false\n\t\t\t\tif (b != Math.round(b)) return true\n\t\t\t\treturn b < a ? -1 : b > a ? 1 : 0;\n\t\t\t})\n*/\n\t\t\tthis._chordLayout = this._d3chord(matrix);\n\n\t\t\tchordChanged = true;\n\t\t}\n\n\t\tif (chordChanged || this.isDirty(\"radius\") || this.isDirty(\"nodeWidth\")) {\n\t\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), Math.min(this.innerWidth(), this.innerHeight())) / 2;\n\n\t\t\tlet i = 0;\n\n\t\t\tconst chordStartAngle = this.get(\"startAngle\", 0);\n\t\t\tconst nodeWidth = this.get(\"nodeWidth\", 0);\n\n\t\t\t$array.each(this.nodes.dataItems, (dataItem) => {\n\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\tconst chordGroup = (this._chordLayout as any).groups[i];\n\t\t\t\tconst startAngle = chordGroup.startAngle * $math.DEGREES + chordStartAngle;\n\t\t\t\tconst endAngle = chordGroup.endAngle * $math.DEGREES + chordStartAngle;\n\t\t\t\tslice.setAll({ radius: radius, innerRadius: radius - nodeWidth, startAngle: startAngle as number, arc: endAngle - startAngle })\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tlabel.setAll({ labelAngle: startAngle + (endAngle - startAngle) / 2 });\n\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\tlabel.setPrivate(\"innerRadius\", 0.1);\n\t\t\t\ti++;\n\t\t\t})\n\n\t\t\tconst linkRadius = radius - this.get(\"nodeWidth\", 0);\n\n\t\t\t$array.each(this._chordLayout, (chord) => {\n\n\t\t\t\tlet dataItem = this._linksByIndex[chord.source.index + \"_\" + chord.target.index];\n\n\t\t\t\tif (!dataItem) {\n\t\t\t\t\tdataItem = this._linksByIndex[chord.target.index + \"_\" + chord.source.index];\n\t\t\t\t}\n\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tconst link = dataItem.get(\"link\");\n\t\t\t\t\tthis._getLinkPoints(link, linkRadius, chord);\n\t\t\t\t\tthis._updateLink(this._ribbon, link, linkRadius, chord);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getLinkPoints(link: ChordLink, linkRadius: number, chordLayoutItem: any) {\n\t\tconst source = chordLayoutItem.source;\n\t\tconst target = chordLayoutItem.target;\n\n\t\tconst chordStartAngle = this.get(\"startAngle\", 0) * $math.RADIANS;\n\n\t\tif (source && target) {\n\t\t\tconst startAngle0 = source.startAngle;\n\t\t\tconst endAngle0 = source.endAngle\n\t\t\tconst angle0 = startAngle0 + (endAngle0 - startAngle0) / 2 + chordStartAngle;\n\n\t\t\tconst startAngle1 = target.startAngle;\n\t\t\tconst endAngle1 = target.endAngle\n\t\t\tconst angle1 = startAngle1 + (endAngle1 - startAngle1) / 2 + chordStartAngle;\n\n\t\t\tlink._p0 = { x: linkRadius * Math.cos(angle0), y: linkRadius * Math.sin(angle0) };\n\t\t\tlink._p1 = { x: linkRadius * Math.cos(angle1), y: linkRadius * Math.sin(angle1) };\n\t\t}\n\t}\n\n\tprotected _updateLink(ribbon: RibbonGenerator<any, Ribbon, RibbonSubgroup>, link: ChordLink, linkRadius: number, chordLayoutItem: any) {\n\t\tif (chordLayoutItem) {\n\t\t\tribbon.sourceRadius($utils.relativeToValue(link.get(\"sourceRadius\", p100), linkRadius));\n\t\t\tribbon.targetRadius($utils.relativeToValue(link.get(\"targetRadius\", p100), linkRadius));\n\n\t\t\tlink.set(\"draw\", (display) => {\n\t\t\t\tribbon.context(display as any);\n\t\t\t\tribbon(chordLayoutItem);\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tlabel.dispose();\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}