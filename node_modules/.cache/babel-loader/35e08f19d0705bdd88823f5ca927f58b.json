{"ast":null,"code":"function parseDate(timezone, date) {\n  var year = 0;\n  var month = 0;\n  var day = 1;\n  var hour = 0;\n  var minute = 0;\n  var second = 0;\n  var millisecond = 0;\n  timezone.formatToParts(date).forEach(function (x) {\n    switch (x.type) {\n      case \"year\":\n        year = +x.value;\n        break;\n\n      case \"month\":\n        month = +x.value - 1;\n        break;\n\n      case \"day\":\n        day = +x.value;\n        break;\n\n      case \"hour\":\n        hour = +x.value;\n        break;\n\n      case \"minute\":\n        minute = +x.value;\n        break;\n\n      case \"second\":\n        second = +x.value;\n        break;\n\n      case \"fractionalSecond\":\n        millisecond = +x.value;\n        break;\n    }\n  });\n\n  if (hour === 24) {\n    hour = 0;\n  }\n\n  return {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  };\n}\n\nfunction toUTCDate(timezone, date) {\n  var _a = parseDate(timezone, date),\n      year = _a.year,\n      month = _a.month,\n      day = _a.day,\n      hour = _a.hour,\n      minute = _a.minute,\n      second = _a.second,\n      millisecond = _a.millisecond;\n\n  return Date.UTC(year, month, day, hour, minute, second, millisecond);\n}\n\nvar Timezone =\n/** @class */\nfunction () {\n  function Timezone(timezone, isReal) {\n    Object.defineProperty(this, \"_utc\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_dtf\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n\n    this.name = timezone;\n    this._utc = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: \"UTC\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      fractionalSecondDigits: 3\n    });\n    this._dtf = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: timezone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      fractionalSecondDigits: 3\n    });\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   timezone  IANA timezone\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Timezone, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (timezone) {\n      return new this(timezone, true);\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"convertLocal\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      var offset = this.offsetUTC(date);\n      var userOffset = date.getTimezoneOffset();\n      var output = new Date(date);\n      output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));\n      var newUserOffset = output.getTimezoneOffset();\n\n      if (userOffset != newUserOffset) {\n        output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);\n      }\n\n      return output;\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"offsetUTC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      var utc = toUTCDate(this._utc, date);\n      var dtf = toUTCDate(this._dtf, date);\n      return (utc - dtf) / 60000;\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"parseDate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      return parseDate(this._dtf, date);\n    }\n  });\n  return Timezone;\n}();\n\nexport { Timezone };","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Timezone.ts"],"names":[],"mappings":"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","sourcesContent":["interface ParsedDate {\n\tyear: number,\n\tmonth: number,\n\tday: number,\n\thour: number,\n\tminute: number,\n\tsecond: number,\n\tmillisecond: number,\n}\n\nfunction parseDate(timezone: Intl.DateTimeFormat, date: Date): ParsedDate {\n\tlet year = 0;\n\tlet month = 0;\n\tlet day = 1;\n\tlet hour = 0;\n\tlet minute = 0;\n\tlet second = 0;\n\tlet millisecond = 0;\n\n\ttimezone.formatToParts(date).forEach((x) => {\n\t\tswitch (x.type) {\n            case \"year\":\n                year = +x.value;\n                break;\n            case \"month\":\n                month = (+x.value) - 1;\n                break;\n            case \"day\":\n                day = +x.value;\n                break;\n            case \"hour\":\n                hour = +x.value;\n                break;\n            case \"minute\":\n                minute = +x.value;\n                break;\n            case \"second\":\n                second = +x.value;\n                break;\n            case \"fractionalSecond\" as any:\n                millisecond = +x.value;\n                break;\n\t\t}\n\t});\n\n\tif (hour === 24) {\n\t\thour = 0;\n\t}\n\n\treturn { year, month, day, hour, minute, second, millisecond };\n}\n\n\nfunction toUTCDate(timezone: Intl.DateTimeFormat, date: Date): number {\n\tconst { year, month, day, hour, minute, second, millisecond } = parseDate(timezone, date);\n\treturn Date.UTC(year, month, day, hour, minute, second, millisecond);\n}\n\n\nexport class Timezone {\n\tprivate _utc: Intl.DateTimeFormat;\n\tprivate _dtf: Intl.DateTimeFormat;\n\n\tpublic readonly name: string | undefined;\n\n    /**\n     * Use this method to create an instance of this class.\n     *\n     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n     * @param   timezone  IANA timezone\n     * @return            Instantiated object\n     */\n\tstatic new<C extends typeof Timezone, T extends InstanceType<C>>(this: C, timezone: string | undefined): T {\n\t\treturn (new this(timezone, true)) as T;\n\t}\n\n\tconstructor(timezone: string | undefined, isReal: boolean) {\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\n\t\tthis.name = timezone;\n\n\t\tthis._utc = new Intl.DateTimeFormat(\"UTC\", {\n\t\t\thour12: false,\n\t\t\ttimeZone: \"UTC\",\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"2-digit\",\n\t\t\tday: \"2-digit\",\n\t\t\thour: \"2-digit\",\n\t\t\tminute: \"2-digit\",\n\t\t\tsecond: \"2-digit\",\n\t\t\tfractionalSecondDigits: 3,\n\t\t} as any);\n\n\t\tthis._dtf = new Intl.DateTimeFormat(\"UTC\", {\n\t\t\thour12: false,\n\t\t\ttimeZone: timezone,\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"2-digit\",\n\t\t\tday: \"2-digit\",\n\t\t\thour: \"2-digit\",\n\t\t\tminute: \"2-digit\",\n\t\t\tsecond: \"2-digit\",\n\t\t\tfractionalSecondDigits: 3,\n\t\t} as any);\n\t}\n\n\tconvertLocal(date: Date): Date {\n\t\tconst offset = this.offsetUTC(date);\n\t\tconst userOffset = date.getTimezoneOffset();\n\t\tconst output = new Date(date);\n\t\toutput.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));\n\n\t\tconst newUserOffset = output.getTimezoneOffset();\n\t\t\n\t\tif(userOffset != newUserOffset){\n\t\t\toutput.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset)\n\t\t}\n\t\t\t\t\n\t\treturn output;\n\t}\n\n\toffsetUTC(date: Date): number {\n\t\tconst utc = toUTCDate(this._utc, date);\n\t\tconst dtf = toUTCDate(this._dtf, date);\n\t\treturn (utc - dtf) / 60000;\n\t}\n\n    parseDate(date: Date): ParsedDate {\n        return parseDate(this._dtf, date)\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}