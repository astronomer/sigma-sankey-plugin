{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { FlowNodes } from \"./FlowNodes\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport * as $math from \"../../core/util/Math\";\n/**\r\n * Holds instances of nodes for a [[Chord]] series.\r\n */\n\nvar ChordNodes =\n/** @class */\nfunction (_super) {\n  __extends(ChordNodes, _super);\n\n  function ChordNodes() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * List of label elements.\r\n     *\r\n     * @default new ListTemplate<RadialLabel>\r\n     */\n\n\n    Object.defineProperty(_this, \"labels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return RadialLabel._new(_this._root, {}, [_this.labels.template]);\n      })\n    });\n    /**\r\n     * Related [[Chord]] series.\r\n     */\n\n    Object.defineProperty(_this, \"flow\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_dAngle\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * List of slice elements.\r\n     *\r\n     * @default new ListTemplate<Slice>\r\n     */\n\n    Object.defineProperty(_this, \"rectangles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListTemplate(Template.new({}), function () {\n        return Slice._new(_this._root, {\n          themeTags: [\"shape\"]\n        }, [_this.rectangles.template]);\n      })\n    });\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(ChordNodes.prototype, \"makeNode\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      var _this = this;\n\n      var node = _super.prototype.makeNode.call(this, dataItem, \"chord\");\n\n      var slice = node.children.insertIndex(0, this.rectangles.make());\n      dataItem.set(\"slice\", slice);\n\n      slice._setSoft(\"fill\", dataItem.get(\"fill\"));\n\n      var label = this.labels.make();\n      this.labels.push(label);\n      label.addTag(\"flow\");\n      label.addTag(\"chord\");\n      label.addTag(\"node\");\n      node.children.push(label);\n      dataItem.set(\"label\", label);\n      node.events.on(\"dragstart\", function (e) {\n        var point = _this.toLocal(e.point);\n\n        var angle = $math.getAngle({\n          x: 0,\n          y: 0\n        }, point);\n\n        if (_this.flow) {\n          _this._dAngle = _this.flow.get(\"startAngle\", 0) - angle;\n        }\n      });\n      node.events.on(\"dragged\", function (e) {\n        var point = _this.toLocal(e.point);\n\n        var angle = $math.getAngle({\n          x: 0,\n          y: 0\n        }, point);\n        node.setAll({\n          x: 0,\n          y: 0\n        });\n\n        if (_this.flow) {\n          _this.flow.set(\"startAngle\", angle + _this._dAngle);\n        }\n      });\n\n      label._setDataItem(dataItem);\n\n      slice._setDataItem(dataItem);\n\n      return node;\n    }\n  });\n  Object.defineProperty(ChordNodes.prototype, \"_positionBullet\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (bullet) {\n      var sprite = bullet.get(\"sprite\");\n\n      if (sprite) {\n        var dataItem = sprite.dataItem;\n\n        if (dataItem) {\n          var sprite_1 = bullet.get(\"sprite\");\n\n          if (sprite_1) {\n            var slice = dataItem.get(\"slice\");\n            var locationX = bullet.get(\"locationX\", 0.5);\n            var locationY = bullet.get(\"locationY\", 0.5);\n\n            if (slice) {\n              var radius = slice.get(\"radius\", 0);\n              var innerRadius = slice.get(\"innerRadius\", 0);\n              var bulletRadius = innerRadius + (radius - innerRadius) * locationY;\n              var angle = slice.get(\"startAngle\", 0) + slice.get(\"arc\", 0) * locationX;\n              sprite_1.setAll({\n                x: bulletRadius * $math.cos(angle),\n                y: bulletRadius * $math.sin(angle)\n              });\n            }\n          }\n        }\n      }\n    }\n  });\n  Object.defineProperty(ChordNodes, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ChordNodes\"\n  });\n  Object.defineProperty(ChordNodes, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: FlowNodes.classNames.concat([ChordNodes.className])\n  });\n  return ChordNodes;\n}(FlowNodes);\n\nexport { ChordNodes };","map":{"version":3,"sources":["../../../../../src/.internal/charts/flow/ChordNodes.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { FlowNode } from \"./FlowNode\";\nimport type { Chord } from \"./Chord\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport { FlowNodes, IFlowNodesSettings, IFlowNodesDataItem, IFlowNodesPrivate, IFlowNodesEvents } from \"./FlowNodes\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\n\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IChordNodesDataItem extends IFlowNodesDataItem {\n\n\t/**\n\t * Node [[Slice]] element.\n\t */\n\tslice: Slice;\n\n\t/**\n\t * Node label element.\n\t */\n\tlabel: RadialLabel;\n\n}\n\nexport interface IChordNodesSettings extends IFlowNodesSettings {\n}\n\nexport interface IChordNodesPrivate extends IFlowNodesPrivate {\n}\n\nexport interface IChordNodesEvents extends IFlowNodesEvents {\n}\n\n/**\n * Holds instances of nodes for a [[Chord]] series.\n */\nexport class ChordNodes extends FlowNodes {\n\tpublic static className: string = \"ChordNodes\";\n\tpublic static classNames: Array<string> = FlowNodes.classNames.concat([ChordNodes.className]);\n\n\t/**\n\t * List of label elements.\n\t *\n\t * @default new ListTemplate<RadialLabel>\n\t */\n\tpublic readonly labels: ListTemplate<RadialLabel> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => RadialLabel._new(this._root, {}, [this.labels.template])\n\t);\n\n\tdeclare public _settings: IChordNodesSettings;\n\tdeclare public _privateSettings: IChordNodesPrivate;\n\tdeclare public _dataItemSettings: IChordNodesDataItem;\n\tdeclare public _events: IChordNodesEvents;\n\n\t/**\n\t * Related [[Chord]] series.\n\t */\n\tpublic flow: Chord | undefined;\n\n\tprotected _dAngle: number = 0;\n\n\t/**\n\t * List of slice elements.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly rectangles: ListTemplate<Slice> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, { themeTags: [\"shape\"] }, [this.rectangles.template])\n\t);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeNode(dataItem: DataItem<this[\"_dataItemSettings\"]>): FlowNode {\n\t\tconst node = super.makeNode(dataItem, \"chord\");\n\n\t\tconst slice = node.children.insertIndex(0, this.rectangles.make());\n\t\tdataItem.set(\"slice\", slice);\n\t\tslice._setSoft(\"fill\", dataItem.get(\"fill\"));\n\n\t\tconst label = this.labels.make();\n\t\tthis.labels.push(label);\n\t\tlabel.addTag(\"flow\");\n\t\tlabel.addTag(\"chord\");\n\t\tlabel.addTag(\"node\");\n\n\t\tnode.children.push(label);\n\t\tdataItem.set(\"label\", label);\n\n\t\tnode.events.on(\"dragstart\", (e) => {\n\t\t\tlet point = this.toLocal(e.point);\n\t\t\tconst angle = $math.getAngle({ x: 0, y: 0 }, point);\n\t\t\tif (this.flow) {\n\t\t\t\tthis._dAngle = this.flow.get(\"startAngle\", 0) - angle;\n\t\t\t}\n\t\t})\n\n\t\tnode.events.on(\"dragged\", (e) => {\n\t\t\tlet point = this.toLocal(e.point);\n\t\t\tconst angle = $math.getAngle({ x: 0, y: 0 }, point);\n\n\t\t\tnode.setAll({ x: 0, y: 0 });\n\t\t\tif (this.flow) {\n\t\t\t\tthis.flow.set(\"startAngle\", angle + this._dAngle);\n\t\t\t}\n\t\t})\n\n\t\tlabel._setDataItem(dataItem);\n\t\tslice._setDataItem(dataItem);\n\n\t\treturn node;\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tif (dataItem) {\n\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\tif (sprite) {\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\t\t\tconst bulletRadius = innerRadius + (radius - innerRadius) * locationY;\n\t\t\t\t\t\tconst angle = slice.get(\"startAngle\", 0) + slice.get(\"arc\", 0) * locationX;\n\t\t\t\t\t\tsprite.setAll({ x: bulletRadius * $math.cos(angle), y: bulletRadius * $math.sin(angle) });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}