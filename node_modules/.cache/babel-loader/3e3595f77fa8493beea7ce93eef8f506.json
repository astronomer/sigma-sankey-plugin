{"ast":null,"code":"var _jsxFileName = \"/Users/medina/development/sigma-sankey-plugin/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useMemo, useRef } from \"react\";\nimport * as am5 from '@amcharts/amcharts5';\nimport * as am5Flow from '@amcharts/amcharts5/flow';\nimport { client, useConfig, useElementData } from \"@sigmacomputing/plugin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclient.config.configureEditorPanel([{\n  name: \"source\",\n  type: \"element\"\n}, {\n  name: \"dimension\",\n  type: \"column\",\n  source: \"source\",\n  allowMultiple: true\n}, {\n  name: \"measures\",\n  type: \"column\",\n  source: \"source\",\n  allowMultiple: true\n}]);\n\nfunction App() {\n  _s();\n\n  const config = useConfig();\n  const sigmaData = useElementData(config.source);\n  const ref = useRef();\n  const options = useMemo(() => {\n    const dimensions = config.dimension;\n    const measures = config.measures; // transform sigmaData --> sankey data\n\n    let dataMap = [];\n\n    if (dimensions && (sigmaData === null || sigmaData === void 0 ? void 0 : sigmaData[dimensions[0]])) {\n      for (let i = 0; i < dimensions.length - 1; i++) {\n        for (let j = 0; j < sigmaData[dimensions[i]].length; j++) {\n          const from = sigmaData[dimensions[i]][j];\n          const to = sigmaData[dimensions[i + 1]][j];\n          const weight = sigmaData[measures[i]][j];\n          const dataPoint = [from, to, weight];\n          dataMap[dataPoint] = dataPoint;\n        }\n      }\n\n      let data = [];\n      let i = 0;\n\n      for (var key in dataMap) {\n        data[i] = dataMap[key];\n        i++;\n      }\n    }\n  }, [config, sigmaData]);\n  am5.ready(function () {\n    let root = am5.Root.new(\"chartdiv\");\n  });\n  let series = root.container.children.push(am5Flow.Sankey.new(root, {\n    sourceIdField: \"from\",\n    targetIdField: \"to\",\n    valueField: \"value\",\n    paddingRight: 150,\n    nodeAlign: 'left',\n    nodePadding: 100,\n    nodeWidth: 8,\n    linkTension: 0,\n    idField: \"id\"\n  }));\n  series.links.template.setAll({\n    fillOpacity: 0.55,\n    fillStyle: \"source\",\n    controlPointDistance: 0\n  });\n  series.nodes.rectangles.template.adapters.add('tooltipText', function (tooltipText, target) {\n    const links = target.dataItem._settings.incomingLinks || [];\n    let toolTip = \"\";\n\n    if (links && links.length > 0) {\n      links.forEach(node => {\n        toolTip += `${node.dataContext.from} - ${node.dataContext.value} \\n`;\n      });\n    }\n\n    return toolTip;\n  });\n  series.nodes.labels.template.setAll({\n    text: \"[bold]{name}: {sumIncoming}\"\n  });\n  series.data.setAll(options);\n  this.root = root;\n  series.appear(1000, 500);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chartdiv\",\n    style: {\n      width: \"100%\",\n      height: \"98vh\"\n    },\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"M3PMrxS3QZkKj02N9zl80Pb62sI=\", false, function () {\n  return [useConfig, useElementData];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/medina/development/sigma-sankey-plugin/src/App.js"],"names":["useMemo","useRef","am5","am5Flow","client","useConfig","useElementData","config","configureEditorPanel","name","type","source","allowMultiple","App","sigmaData","ref","options","dimensions","dimension","measures","dataMap","i","length","j","from","to","weight","dataPoint","data","key","ready","root","Root","new","series","container","children","push","Sankey","sourceIdField","targetIdField","valueField","paddingRight","nodeAlign","nodePadding","nodeWidth","linkTension","idField","links","template","setAll","fillOpacity","fillStyle","controlPointDistance","nodes","rectangles","adapters","add","tooltipText","target","dataItem","_settings","incomingLinks","toolTip","forEach","node","dataContext","value","labels","text","appear","width","height"],"mappings":";;;AAAA,OAAO,WAAP;AAEA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,qBAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AAEA,SACEC,MADF,EAEEC,SAFF,EAGEC,cAHF,QAIO,wBAJP;;AAMAF,MAAM,CAACG,MAAP,CAAcC,oBAAd,CAAmC,CACjC;AAAEC,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CADiC,EAEjC;AAAED,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,IAAI,EAAE,QAA3B;AAAqCC,EAAAA,MAAM,EAAE,QAA7C;AAAuDC,EAAAA,aAAa,EAAE;AAAtE,CAFiC,EAGjC;AAAEH,EAAAA,IAAI,EAAE,UAAR;AAAoBC,EAAAA,IAAI,EAAE,QAA1B;AAAoCC,EAAAA,MAAM,EAAE,QAA5C;AAAsDC,EAAAA,aAAa,EAAE;AAArE,CAHiC,CAAnC;;AAMA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMN,MAAM,GAAGF,SAAS,EAAxB;AACA,QAAMS,SAAS,GAAGR,cAAc,CAACC,MAAM,CAACI,MAAR,CAAhC;AACA,QAAMI,GAAG,GAAGd,MAAM,EAAlB;AACA,QAAMe,OAAO,GAAGhB,OAAO,CAAC,MAAM;AAC5B,UAAMiB,UAAU,GAAGV,MAAM,CAACW,SAA1B;AACA,UAAMC,QAAQ,GAAGZ,MAAM,CAACY,QAAxB,CAF4B,CAI5B;;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAIH,UAAU,KAAIH,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAGG,UAAU,CAAC,CAAD,CAAb,CAAb,CAAd,EAA8C;AAC5C,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACK,MAAX,GAAoB,CAAxC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAAS,CAACG,UAAU,CAACI,CAAD,CAAX,CAAT,CAAyBC,MAA7C,EAAqDC,CAAC,EAAtD,EAA0D;AACxD,gBAAMC,IAAI,GAAGV,SAAS,CAACG,UAAU,CAACI,CAAD,CAAX,CAAT,CAAyBE,CAAzB,CAAb;AACA,gBAAME,EAAE,GAAGX,SAAS,CAACG,UAAU,CAACI,CAAC,GAAG,CAAL,CAAX,CAAT,CAA6BE,CAA7B,CAAX;AACA,gBAAMG,MAAM,GAAGZ,SAAS,CAACK,QAAQ,CAACE,CAAD,CAAT,CAAT,CAAuBE,CAAvB,CAAf;AACA,gBAAMI,SAAS,GAAG,CAACH,IAAD,EAAOC,EAAP,EAAWC,MAAX,CAAlB;AACAN,UAAAA,OAAO,CAACO,SAAD,CAAP,GAAqBA,SAArB;AACD;AACF;;AACD,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIP,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIQ,GAAT,IAAgBT,OAAhB,EAAyB;AACvBQ,QAAAA,IAAI,CAACP,CAAD,CAAJ,GAAUD,OAAO,CAACS,GAAD,CAAjB;AACAR,QAAAA,CAAC;AACF;AACF;AACF,GAvBsB,EAuBpB,CAACd,MAAD,EAASO,SAAT,CAvBoB,CAAvB;AAyBAZ,EAAAA,GAAG,CAAC4B,KAAJ,CAAU,YAAY;AACpB,QAAIC,IAAI,GAAG7B,GAAG,CAAC8B,IAAJ,CAASC,GAAT,CAAa,UAAb,CAAX;AACD,GAFD;AAKA,MAAIC,MAAM,GAAGH,IAAI,CAACI,SAAL,CAAeC,QAAf,CAAwBC,IAAxB,CACXlC,OAAO,CAACmC,MAAR,CAAeL,GAAf,CAAmBF,IAAnB,EAAyB;AACvBQ,IAAAA,aAAa,EAAE,MADQ;AAEvBC,IAAAA,aAAa,EAAE,IAFQ;AAGvBC,IAAAA,UAAU,EAAE,OAHW;AAIvBC,IAAAA,YAAY,EAAE,GAJS;AAKvBC,IAAAA,SAAS,EAAE,MALY;AAMvBC,IAAAA,WAAW,EAAE,GANU;AAOvBC,IAAAA,SAAS,EAAE,CAPY;AAQvBC,IAAAA,WAAW,EAAE,CARU;AASvBC,IAAAA,OAAO,EAAE;AATc,GAAzB,CADW,CAAb;AAcAb,EAAAA,MAAM,CAACc,KAAP,CAAaC,QAAb,CAAsBC,MAAtB,CAA6B;AAC3BC,IAAAA,WAAW,EAAE,IADc;AAE3BC,IAAAA,SAAS,EAAE,QAFgB;AAG3BC,IAAAA,oBAAoB,EAAE;AAHK,GAA7B;AAMAnB,EAAAA,MAAM,CAACoB,KAAP,CAAaC,UAAb,CAAwBN,QAAxB,CAAiCO,QAAjC,CAA0CC,GAA1C,CAA8C,aAA9C,EAA6D,UAASC,WAAT,EAAsBC,MAAtB,EAA8B;AACzF,UAAMX,KAAK,GAAGW,MAAM,CAACC,QAAP,CAAgBC,SAAhB,CAA0BC,aAA1B,IAA2C,EAAzD;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,QAAIf,KAAK,IAAIA,KAAK,CAAC1B,MAAN,GAAe,CAA5B,EAA+B;AAC7B0B,MAAAA,KAAK,CAACgB,OAAN,CAAeC,IAAD,IAAU;AACtBF,QAAAA,OAAO,IAAK,GAAEE,IAAI,CAACC,WAAL,CAAiB1C,IAAK,MAAKyC,IAAI,CAACC,WAAL,CAAiBC,KAAM,KAAhE;AACD,OAFD;AAGD;;AACD,WAAOJ,OAAP;AACD,GAVD;AAaA7B,EAAAA,MAAM,CAACoB,KAAP,CAAac,MAAb,CAAoBnB,QAApB,CAA6BC,MAA7B,CAAoC;AAClCmB,IAAAA,IAAI,EAAE;AAD4B,GAApC;AAIAnC,EAAAA,MAAM,CAACN,IAAP,CAAYsB,MAAZ,CAAmBlC,OAAnB;AAEA,OAAKe,IAAL,GAAYA,IAAZ;AACAG,EAAAA,MAAM,CAACoC,MAAP,CAAc,IAAd,EAAoB,GAApB;AAEA,sBACE;AAAK,IAAA,EAAE,EAAC,UAAR;AAAmB,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAA1B;AAA4D,IAAA,GAAG,EAAEzD;AAAjE;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GA/EQF,G;UACQR,S,EACGC,c;;;KAFXO,G;AAiFT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\n\nimport { useMemo, useRef } from \"react\";\nimport * as am5 from '@amcharts/amcharts5';\nimport * as am5Flow from '@amcharts/amcharts5/flow';\n\nimport {\n  client,\n  useConfig,\n  useElementData,\n} from \"@sigmacomputing/plugin\";\n\nclient.config.configureEditorPanel([\n  { name: \"source\", type: \"element\" },\n  { name: \"dimension\", type: \"column\", source: \"source\", allowMultiple: true },\n  { name: \"measures\", type: \"column\", source: \"source\", allowMultiple: true },\n]);\n\nfunction App() {\n  const config = useConfig();\n  const sigmaData = useElementData(config.source);\n  const ref = useRef();\n  const options = useMemo(() => {\n    const dimensions = config.dimension;\n    const measures = config.measures;\n\n    // transform sigmaData --> sankey data\n    let dataMap = [];\n    if (dimensions && sigmaData?.[dimensions[0]]) {\n      for (let i = 0; i < dimensions.length - 1; i++) {\n        for (let j = 0; j < sigmaData[dimensions[i]].length; j++) {\n          const from = sigmaData[dimensions[i]][j];\n          const to = sigmaData[dimensions[i + 1]][j];\n          const weight = sigmaData[measures[i]][j];\n          const dataPoint = [from, to, weight];\n          dataMap[dataPoint] = dataPoint;\n        }\n      }\n      let data = [];\n      let i = 0;\n      for (var key in dataMap) {\n        data[i] = dataMap[key];\n        i++;\n      }\n    }\n  }, [config, sigmaData]);\n\n  am5.ready(function () {\n    let root = am5.Root.new(\"chartdiv\");\n  });\n\n\n  let series = root.container.children.push(\n    am5Flow.Sankey.new(root, {\n      sourceIdField: \"from\",\n      targetIdField: \"to\",\n      valueField: \"value\",\n      paddingRight: 150,\n      nodeAlign: 'left',\n      nodePadding: 100,\n      nodeWidth: 8,\n      linkTension: 0,\n      idField: \"id\",\n    })\n  );\n\n  series.links.template.setAll({\n    fillOpacity: 0.55,\n    fillStyle: \"source\",\n    controlPointDistance: 0,\n  });\n\n  series.nodes.rectangles.template.adapters.add('tooltipText', function(tooltipText, target) {\n    const links = target.dataItem._settings.incomingLinks || [];\n    let toolTip = \"\";\n\n    if (links && links.length > 0) {\n      links.forEach((node) => {\n        toolTip += `${node.dataContext.from} - ${node.dataContext.value} \\n`;\n      });\n    } \n    return toolTip;\n  });\n\n\n  series.nodes.labels.template.setAll({\n    text: \"[bold]{name}: {sumIncoming}\"\n  });\n\n  series.data.setAll(options);\n\n  this.root = root;\n  series.appear(1000, 500);\n\n  return (\n    <div id=\"chartdiv\" style={{ width: \"100%\", height: \"98vh\"}} ref={ref}></div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}