{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent } from \"../../core/util/Percent\";\n/**\r\n * A base class for a flow link.\r\n */\n\nvar FlowLink =\n/** @class */\nfunction (_super) {\n  __extends(FlowLink, _super);\n\n  function FlowLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_fillGradient\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_strokeGradient\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(FlowLink.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this.isDirty(\"fillStyle\")) {\n        var series = this.series;\n        var dataItem = this.dataItem;\n\n        if (series && dataItem) {\n          series._updateLinkColor(dataItem);\n        }\n      }\n    }\n  });\n  Object.defineProperty(FlowLink.prototype, \"_getTooltipPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var tooltipY = this.get(\"tooltipY\");\n      var position = 0.5;\n\n      if (tooltipY instanceof Percent) {\n        position = tooltipY.value;\n      }\n\n      return this.getPoint(position);\n    }\n  });\n  Object.defineProperty(FlowLink, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"FlowLink\"\n  });\n  Object.defineProperty(FlowLink, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([FlowLink.className])\n  });\n  return FlowLink;\n}(Graphics);\n\nexport { FlowLink };","map":{"version":3,"sources":["../../../../../src/.internal/charts/flow/FlowLink.ts"],"names":[],"mappings":";AACA,SAAS,QAAT,QAA8D,4BAA9D;AAKA,SAAS,OAAT,QAAwB,yBAAxB;AA6BA;;AAEG;;AACH,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAvC,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAEC,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAUA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,eAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,iBAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;;AAwBA;;;;;;WAtBA,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AACA,UAAI,KAAK,OAAL,CAAa,WAAb,CAAJ,EAA+B;AAC9B,YAAM,MAAM,GAAG,KAAK,MAApB;AACA,YAAM,QAAQ,GAAG,KAAK,QAAtB;;AACA,YAAI,MAAM,IAAI,QAAd,EAAwB;AACvB,UAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB;AACA;AACD;AACD;;;;;;WAID,YAAA;AACC,UAAI,QAAQ,GAAG,KAAK,GAAL,CAAS,UAAT,CAAf;AACA,UAAI,QAAQ,GAAG,GAAf;;AACA,UAAI,QAAQ,YAAY,OAAxB,EAAiC;AAChC,QAAA,QAAQ,GAAG,QAAQ,CAAC,KAApB;AACA;;AAED,aAAO,KAAK,QAAL,CAAc,QAAd,CAAP;AACA;;AA7BD,EAAA,MAAA,CAAA,cAAA,CAAA,QAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,QAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,QAAQ,CAAC,SAAV,CAA3B;AAA1C,GAAA;AA6BD,SAAA,QAAA;AAAC,CArCD,CAAuC,QAAvC,CAAA;;SAAsB,Q","sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { IFlowNodesDataItem } from \"./FlowNodes\";\nimport type { IFlowDataItem, Flow } from \"./Flow\";\nimport type { IOrientationPoint, IPoint } from \"../../core/util/IPoint\";\nimport type { LinearGradient } from \"../../core/render/gradients/LinearGradient\";\nimport { Percent } from \"../../core/util/Percent\";\n\nexport interface IFlowLinkSettings extends IGraphicsSettings {\n\n\t/**\n\t * Source node data item.\n\t */\n\tsource?: DataItem<IFlowNodesDataItem>;\n\n\t/**\n\t * Source node data item.\n\t */\n\ttarget?: DataItem<IFlowNodesDataItem>;\n\n\t/**\n\t * Type of fill to use for links.\n\t */\n\tfillStyle?: \"solid\" | \"source\" | \"target\" | \"gradient\" | \"none\";\n\n\t/**\n\t * Type of outline to use for links.\n\t */\n\tstrokeStyle?: \"solid\" | \"source\" | \"target\" | \"gradient\" | \"none\";\n\n}\n\nexport interface IFlowLinkPrivate extends IGraphicsPrivate {\n}\n\n/**\n * A base class for a flow link.\n */\nexport abstract class FlowLink extends Graphics {\n\n\tpublic series: Flow | undefined;\n\n\tdeclare public _settings: IFlowLinkSettings;\n\tdeclare public _privateSettings: IFlowLinkPrivate;\n\n\tpublic static className: string = \"FlowLink\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([FlowLink.className]);\n\n\tdeclare protected _dataItem: DataItem<IFlowDataItem> | undefined;\n\n\tpublic _fillGradient: LinearGradient | undefined;\n\tpublic _strokeGradient: LinearGradient | undefined;\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\t\tif (this.isDirty(\"fillStyle\")) {\n\t\t\tconst series = this.series;\n\t\t\tconst dataItem = this.dataItem as DataItem<IFlowDataItem>;\n\t\t\tif (series && dataItem) {\n\t\t\t\tseries._updateLinkColor(dataItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic abstract getPoint(location: number): IOrientationPoint;\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\t\tlet position = 0.5;\n\t\tif (tooltipY instanceof Percent) {\n\t\t\tposition = tooltipY.value;\n\t\t}\n\n\t\treturn this.getPoint(position);\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}