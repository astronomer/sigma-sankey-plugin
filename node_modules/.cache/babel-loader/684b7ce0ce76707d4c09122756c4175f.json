{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { FlowLink } from \"./FlowLink\";\nimport * as $math from \"../../core/util/Math\";\n\nvar SankeyLink =\n/** @class */\nfunction (_super) {\n  __extends(SankeyLink, _super);\n\n  function SankeyLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_svgPath\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\")\n    });\n    Object.defineProperty(_this, \"_totalLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(SankeyLink.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _a, _b, _c, _d;\n\n      var _this = this;\n\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"source\")) {\n        var source_1 = this.get(\"source\");\n\n        if (source_1) {\n          var sourceNode_1 = source_1.get(\"node\");\n\n          this._disposers.push(sourceNode_1.events.on(\"positionchanged\", function () {\n            _this.markDirty();\n          }));\n        }\n      }\n\n      if (this.isDirty(\"target\")) {\n        var target_1 = this.get(\"target\");\n\n        if (target_1) {\n          var targetNode_1 = target_1.get(\"node\");\n\n          this._disposers.push(targetNode_1.events.on(\"positionchanged\", function () {\n            _this.markDirty();\n          }));\n        }\n      }\n\n      if (this.isPrivateDirty(\"orientation\")) {\n        var series = this.series;\n        var dataItem = this.dataItem;\n\n        if (dataItem && series) {\n          series._updateLinkColor(dataItem);\n        }\n      }\n\n      var target = this.get(\"target\");\n      var source = this.get(\"source\");\n      var sourceNode;\n      var targetNode;\n\n      if (source && target) {\n        this._clear = true;\n        sourceNode = source.get(\"node\");\n        targetNode = target.get(\"node\");\n        var x0 = 0;\n        var x1 = 0;\n        var y0 = 0;\n        var y1 = 0;\n        var xt0 = 0;\n        var yt0 = 0;\n        var xt1 = 0;\n        var yt1 = 0;\n        var xb0 = 0;\n        var xb1 = 0;\n        var yb0 = 0;\n        var yb1 = 0;\n        var xm0 = 0;\n        var xm1 = 0;\n        var ym0 = 0;\n        var ym1 = 0;\n        var angle0 = 0;\n        var angle1 = 0;\n        var dataItem = this.dataItem;\n\n        if (dataItem) {\n          var d3SankeyLink = dataItem.get(\"d3SankeyLink\");\n\n          if (d3SankeyLink) {\n            var w = d3SankeyLink.width || 0;\n            var orientation_1 = this.getPrivate(\"orientation\");\n\n            if (orientation_1 == \"vertical\") {\n              if (sourceNode) {\n                y0 = sourceNode.y();\n              }\n\n              if (targetNode) {\n                y1 = targetNode.y();\n              }\n\n              angle0 = 90;\n              angle1 = 90;\n              x0 = d3SankeyLink.y0 || 0;\n              x1 = d3SankeyLink.y1 || 0;\n\n              if (y1 < y0) {\n                _a = __read([x1, x0], 2), x0 = _a[0], x1 = _a[1];\n                _b = __read([y1, y0], 2), y0 = _b[0], y1 = _b[1];\n              }\n\n              if (source.get(\"unknown\")) {\n                x0 = x1;\n                y0 = y0 + (y1 - y0) / 2;\n              }\n\n              if (target.get(\"unknown\")) {\n                x1 = x0;\n                y1 = y0 + (y1 - y0) / 2;\n              }\n\n              xt0 = x0 - w / 2;\n              yt0 = y0;\n              xt1 = x1 - w / 2;\n              yt1 = y1;\n              xb0 = x0 + w / 2;\n              xb1 = x1 + w / 2;\n              yb0 = y0;\n              yb1 = y1;\n              xm0 = x0;\n              xm1 = x1;\n              ym0 = y0;\n              ym1 = y1;\n            } else {\n              if (sourceNode) {\n                x0 = sourceNode.x();\n              }\n\n              if (targetNode) {\n                x1 = targetNode.x();\n              }\n\n              y0 = d3SankeyLink.y0 || 0;\n              y1 = d3SankeyLink.y1 || 0;\n\n              if (x1 < x0) {\n                _c = __read([x1, x0], 2), x0 = _c[0], x1 = _c[1];\n                _d = __read([y1, y0], 2), y0 = _d[0], y1 = _d[1];\n              }\n\n              if (source.get(\"unknown\")) {\n                y0 = y1;\n                x0 = x0 + (x1 - x0) / 2;\n              }\n\n              if (target.get(\"unknown\")) {\n                y1 = y0;\n                x1 = x0 + (x1 - x0) / 2;\n              }\n\n              xt0 = x0;\n              yt0 = y0 - w / 2;\n              xt1 = x1;\n              yt1 = y1 - w / 2;\n              xb0 = x0;\n              xb1 = x1;\n              yb0 = y0 + w / 2;\n              yb1 = y1 + w / 2;\n              xm0 = x0;\n              xm1 = x1;\n              ym0 = y0;\n              ym1 = y1;\n            }\n\n            if ($math.round(xt0, 3) == $math.round(xt1, 3)) {\n              xt1 += 0.01;\n            }\n\n            if ($math.round(yt0, 3) == $math.round(yt1, 3)) {\n              yt1 += 0.01;\n            }\n\n            if ($math.round(xb0, 3) == $math.round(xb1, 3)) {\n              xb1 += 0.01;\n            }\n\n            if ($math.round(yb0, 3) == $math.round(yb1, 3)) {\n              yb1 += 0.01;\n            }\n\n            var cpd = this.get(\"controlPointDistance\", 0.2);\n            cpd = Math.min(0.4999, cpd);\n            var kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(angle0);\n            var kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(angle0);\n            var kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(angle1);\n            var kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(angle1);\n            var kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(angle0);\n            var kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(angle0);\n            var kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(angle1);\n            var kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(angle1);\n            var angle = $math.getAngle({\n              x: kxt0,\n              y: kyt0\n            }, {\n              x: kxt1,\n              y: kyt1\n            });\n            var dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(angle0);\n            var dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(angle0);\n            var kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(angle0);\n            var kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(angle0);\n            var kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(angle1);\n            var kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(angle1);\n            kxt0 += dx / 2;\n            kyt0 += dy / 2;\n            kxt1 += dx / 2;\n            kyt1 += dy / 2;\n\n            if (orientation_1 == \"vertical\") {\n              kyt0 = Math.min(yt1, Math.max(yt0 + 1, kyt0));\n              kyb0 = Math.min(yb1, Math.max(yb0 + 1, kyb0));\n              kyt1 = Math.max(yt0, Math.min(yt1 - 1, kyt1));\n              kyb1 = Math.max(yb0, Math.min(yb1 - 1, kyb1));\n            } else {\n              kxt0 = Math.min(xt1, Math.max(xt0 + 1, kxt0));\n              kxb0 = Math.min(xb1, Math.max(xb0 + 1, kxb0));\n              kxt1 = Math.max(xt0, Math.min(xt1 - 1, kxt1));\n              kxb1 = Math.max(xb0, Math.min(xb1 - 1, kxb1));\n            }\n\n            var segment_1 = [[xt0, yt0, xb0, yb0], [kxt0, kyt0, kxb0, kyb0], [kxt1, kyt1, kxb1, kyb1], [xt1, yt1, xb1, yb1]];\n            this.set(\"draw\", function (display) {\n              var series = _this.series;\n\n              series._fillGenerator.context(display);\n\n              series._fillGenerator(segment_1);\n            });\n            var middleSegment = [[xm0, ym0], [kxm0, kym0], [kxm1, kym1], [xm1, ym1]];\n\n            var path = this.series._strokeGenerator(middleSegment);\n\n            if (path) {\n              this._svgPath.setAttribute(\"d\", path);\n\n              this._totalLength = this._svgPath.getTotalLength();\n            }\n          }\n        }\n      }\n\n      if (this.series && this.dataItem) {\n        this.series._positionBullets(this.dataItem);\n      }\n    }\n  });\n  Object.defineProperty(SankeyLink.prototype, \"getPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (location) {\n      if (this._svgPath) {\n        if (this._svgPath.getAttribute(\"d\")) {\n          var p0 = this._svgPath.getPointAtLength(location * this._totalLength - 0.1);\n\n          var p1 = this._svgPath.getPointAtLength(location * this._totalLength + 0.1);\n\n          var p = this.toGlobal(this._svgPath.getPointAtLength(location * this._totalLength));\n          return {\n            x: p.x,\n            y: p.y,\n            angle: $math.getAngle(p0, p1)\n          };\n        }\n      }\n\n      return {\n        x: 0,\n        y: 0,\n        angle: 0\n      };\n    }\n  });\n  Object.defineProperty(SankeyLink.prototype, \"_getTooltipPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this.toLocal(_super.prototype._getTooltipPoint.call(this));\n    }\n  });\n  Object.defineProperty(SankeyLink, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"SankeyLink\"\n  });\n  Object.defineProperty(SankeyLink, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: FlowLink.classNames.concat([SankeyLink.className])\n  });\n  return SankeyLink;\n}(FlowLink);\n\nexport { SankeyLink };","map":{"version":3,"sources":["../../../../../src/.internal/charts/flow/SankeyLink.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { FlowNode } from \"./FlowNode\";\nimport type { Sankey, ISankeyDataItem } from \"./Sankey\";\nimport type { ISankeyNodesDataItem } from \"./SankeyNodes\";\nimport type { IOrientationPoint } from \"../../core/util/IPoint\";\n\nimport { FlowLink, IFlowLinkPrivate, IFlowLinkSettings } from \"./FlowLink\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface ISankeyLinkSettings extends IFlowLinkSettings {\n\n\t/**\n\t * Source node data item.\n\t */\n\tsource?: DataItem<ISankeyNodesDataItem>;\n\n\t/**\n\t * Source node data item.\n\t */\n\ttarget?: DataItem<ISankeyNodesDataItem>;\n\n\t/**\n\t * Type of fill to use for links.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/flow-charts/sankey-diagram/#Color_mode} for more info\n\t * @default \"gradient\"\n\t */\n\tfillStyle?: \"solid\" | \"gradient\" | \"source\" | \"target\";\n\n\t/**\n\t * A relative distance from node for link \"elbow\" (bend point).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/flow-charts/sankey-diagram/#Bend_point} for more info\n\t * @default 0.2\n\t */\n\tcontrolPointDistance?: number;\n\n}\n\nexport interface ISankeyLinkPrivate extends IFlowLinkPrivate {\n\n\t/**\n\t * Link orientation.\n\t */\n\torientation?: \"horizontal\" | \"vertical\";\n\n}\n\nexport class SankeyLink extends FlowLink {\n\tdeclare public _settings: ISankeyLinkSettings;\n\tdeclare public _privateSettings: ISankeyLinkPrivate;\n\n\tpublic static className: string = \"SankeyLink\";\n\tpublic static classNames: Array<string> = FlowLink.classNames.concat([SankeyLink.className]);\n\n\tdeclare protected _dataItem: DataItem<ISankeyDataItem> | undefined;\n\n\tdeclare public series: Sankey | undefined;\n\n\tprotected _svgPath: SVGPathElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\tprotected _totalLength: number = 0;\n\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"source\")) {\n\t\t\tconst source = this.get(\"source\");\n\t\t\tif (source) {\n\t\t\t\tconst sourceNode = source.get(\"node\");\n\t\t\t\tthis._disposers.push(sourceNode.events.on(\"positionchanged\", () => {\n\t\t\t\t\tthis.markDirty();\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\t\tif (this.isDirty(\"target\")) {\n\t\t\tconst target = this.get(\"target\");\n\t\t\tif (target) {\n\t\t\t\tconst targetNode = target.get(\"node\");\n\t\t\t\tthis._disposers.push(targetNode.events.on(\"positionchanged\", () => {\n\t\t\t\t\tthis.markDirty();\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\n\t\tif (this.isPrivateDirty(\"orientation\")) {\n\t\t\tconst series = this.series;\n\t\t\tconst dataItem = this.dataItem as DataItem<ISankeyDataItem>;\n\t\t\tif (dataItem && series) {\n\t\t\t\tseries._updateLinkColor(dataItem);\n\t\t\t}\n\t\t}\n\n\t\tconst target = this.get(\"target\");\n\t\tconst source = this.get(\"source\");\n\n\t\tlet sourceNode: FlowNode | undefined;\n\t\tlet targetNode: FlowNode | undefined;\n\n\t\tif (source && target) {\n\t\t\tthis._clear = true;\n\t\t\tsourceNode = source.get(\"node\");\n\t\t\ttargetNode = target.get(\"node\");\n\n\t\t\tlet x0 = 0;\n\t\t\tlet x1 = 0;\n\t\t\tlet y0 = 0;\n\t\t\tlet y1 = 0;\n\n\t\t\tlet xt0 = 0;\n\t\t\tlet yt0 = 0;\n\n\t\t\tlet xt1 = 0;\n\t\t\tlet yt1 = 0;\n\n\t\t\tlet xb0 = 0;\n\t\t\tlet xb1 = 0;\n\n\t\t\tlet yb0 = 0;\n\t\t\tlet yb1 = 0;\n\n\t\t\tlet xm0 = 0;\n\t\t\tlet xm1 = 0;\n\n\t\t\tlet ym0 = 0;\n\t\t\tlet ym1 = 0;\n\n\t\t\tlet angle0 = 0;\n\t\t\tlet angle1 = 0;\n\n\n\t\t\tconst dataItem = this.dataItem as DataItem<ISankeyDataItem>;\n\t\t\tif (dataItem) {\n\t\t\t\tconst d3SankeyLink = dataItem.get(\"d3SankeyLink\");\n\t\t\t\tif (d3SankeyLink) {\n\n\t\t\t\t\tlet w = d3SankeyLink.width || 0;\n\n\t\t\t\t\tlet orientation = this.getPrivate(\"orientation\");\n\n\t\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\t\tif (sourceNode) {\n\t\t\t\t\t\t\ty0 = sourceNode.y();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (targetNode) {\n\t\t\t\t\t\t\ty1 = targetNode.y();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tangle0 = 90;\n\t\t\t\t\t\tangle1 = 90;\n\n\t\t\t\t\t\tx0 = d3SankeyLink.y0 || 0;\n\t\t\t\t\t\tx1 = d3SankeyLink.y1 || 0;\n\n\t\t\t\t\t\tif (y1 < y0) {\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (source.get(\"unknown\")) {\n\t\t\t\t\t\t\tx0 = x1;\n\t\t\t\t\t\t\ty0 = y0 + (y1 - y0) / 2;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (target.get(\"unknown\")) {\n\t\t\t\t\t\t\tx1 = x0;\n\t\t\t\t\t\t\ty1 = y0 + (y1 - y0) / 2;\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\txt0 = x0 - w / 2;\n\t\t\t\t\t\tyt0 = y0;\n\n\t\t\t\t\t\txt1 = x1 - w / 2;\n\t\t\t\t\t\tyt1 = y1;\n\n\t\t\t\t\t\txb0 = x0 + w / 2;\n\t\t\t\t\t\txb1 = x1 + w / 2;\n\n\t\t\t\t\t\tyb0 = y0;\n\t\t\t\t\t\tyb1 = y1;\n\n\t\t\t\t\t\txm0 = x0;\n\t\t\t\t\t\txm1 = x1;\n\n\t\t\t\t\t\tym0 = y0;\n\t\t\t\t\t\tym1 = y1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (sourceNode) {\n\t\t\t\t\t\t\tx0 = sourceNode.x();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (targetNode) {\n\t\t\t\t\t\t\tx1 = targetNode.x();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ty0 = d3SankeyLink.y0 || 0;\n\t\t\t\t\t\ty1 = d3SankeyLink.y1 || 0;\n\n\t\t\t\t\t\tif (x1 < x0) {\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (source.get(\"unknown\")) {\n\t\t\t\t\t\t\ty0 = y1;\n\t\t\t\t\t\t\tx0 = x0 + (x1 - x0) / 2;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (target.get(\"unknown\")) {\n\t\t\t\t\t\t\ty1 = y0;\n\t\t\t\t\t\t\tx1 = x0 + (x1 - x0) / 2;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\txt0 = x0;\n\t\t\t\t\t\tyt0 = y0 - w / 2;\n\n\t\t\t\t\t\txt1 = x1;\n\t\t\t\t\t\tyt1 = y1 - w / 2;\n\n\t\t\t\t\t\txb0 = x0;\n\t\t\t\t\t\txb1 = x1;\n\n\t\t\t\t\t\tyb0 = y0 + w / 2;\n\t\t\t\t\t\tyb1 = y1 + w / 2;\n\n\t\t\t\t\t\txm0 = x0;\n\t\t\t\t\t\txm1 = x1;\n\n\t\t\t\t\t\tym0 = y0;\n\t\t\t\t\t\tym1 = y1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\n\t\t\t\t\t\txt1 += 0.01;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\n\t\t\t\t\t\tyt1 += 0.01;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\n\t\t\t\t\t\txb1 += 0.01;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\n\t\t\t\t\t\tyb1 += 0.01;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet cpd = this.get(\"controlPointDistance\", 0.2);\n\t\t\t\t\tcpd = Math.min(0.4999, cpd);\n\n\t\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(angle0);\n\t\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(angle0);\n\n\t\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(angle1);\n\t\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(angle1);\n\n\t\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(angle0);\n\t\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(angle0);\n\n\t\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(angle1);\n\t\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(angle1);\n\n\t\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\n\n\t\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(angle0);\n\t\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(angle0);\n\n\t\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(angle0);\n\t\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(angle0);\n\n\t\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(angle1);\n\t\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(angle1);\n\n\t\t\t\t\tkxt0 += dx / 2;\n\t\t\t\t\tkyt0 += dy / 2;\n\n\t\t\t\t\tkxt1 += dx / 2;\n\t\t\t\t\tkyt1 += dy / 2;\n\n\t\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\t\tkyt0 = Math.min(yt1, Math.max(yt0 + 1, kyt0));\n\t\t\t\t\t\tkyb0 = Math.min(yb1, Math.max(yb0 + 1, kyb0));\n\n\t\t\t\t\t\tkyt1 = Math.max(yt0, Math.min(yt1 - 1, kyt1));\n\t\t\t\t\t\tkyb1 = Math.max(yb0, Math.min(yb1 - 1, kyb1));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tkxt0 = Math.min(xt1, Math.max(xt0 + 1, kxt0));\n\t\t\t\t\t\tkxb0 = Math.min(xb1, Math.max(xb0 + 1, kxb0));\n\n\t\t\t\t\t\tkxt1 = Math.max(xt0, Math.min(xt1 - 1, kxt1));\n\t\t\t\t\t\tkxb1 = Math.max(xb0, Math.min(xb1 - 1, kxb1));\n\t\t\t\t\t}\n\n\t\t\t\t\tlet segment = [[xt0, yt0, xb0, yb0], [kxt0, kyt0, kxb0, kyb0], [kxt1, kyt1, kxb1, kyb1], [xt1, yt1, xb1, yb1]];\n\n\t\t\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\t\t\tconst series = this.series!;\n\t\t\t\t\t\tseries._fillGenerator.context(display as any);\n\t\t\t\t\t\tseries._fillGenerator(segment as [number, number][]);\n\t\t\t\t\t})\n\n\t\t\t\t\tlet middleSegment = [[xm0, ym0], [kxm0, kym0], [kxm1, kym1], [xm1, ym1]];\n\n\t\t\t\t\tconst path = this.series!._strokeGenerator(middleSegment as [number, number][]);\n\n\t\t\t\t\tif (path) {\n\t\t\t\t\t\tthis._svgPath.setAttribute(\"d\", path);\n\t\t\t\t\t\tthis._totalLength = this._svgPath.getTotalLength();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.series && this.dataItem) {\n\t\t\tthis.series._positionBullets(this.dataItem as any);\n\t\t}\n\t}\n\n\tpublic getPoint(location: number): IOrientationPoint {\n\t\tif (this._svgPath) {\n\t\t\tif (this._svgPath.getAttribute(\"d\")) {\n\t\t\t\tlet p0 = this._svgPath.getPointAtLength(location * this._totalLength - 0.1);\n\t\t\t\tlet p1 = this._svgPath.getPointAtLength(location * this._totalLength + 0.1);\n\t\t\t\tlet p = this.toGlobal(this._svgPath.getPointAtLength(location * this._totalLength));\n\t\t\t\treturn { x: p.x, y: p.y, angle: $math.getAngle(p0, p1) };\n\t\t\t}\n\t\t}\n\t\treturn { x: 0, y: 0, angle: 0 }\n\t}\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\treturn this.toLocal(super._getTooltipPoint());\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}