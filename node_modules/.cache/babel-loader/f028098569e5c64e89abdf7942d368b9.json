{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $draw from \"../util/Draw\";\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n\n  function Line() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Line.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"points\") || this.isDirty(\"segments\") || this._sizeDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Line.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var points = this.get(\"points\");\n        var segments = this.get(\"segments\");\n\n        if (points && points.length > 0) {\n          var point = points[0];\n\n          this._display.moveTo(point.x, point.y);\n\n          $draw.segmentedLine(this._display, [[points]]);\n        } else if (segments) {\n          $draw.segmentedLine(this._display, segments);\n        } else if (!this.get(\"draw\")) {\n          var w = this.width();\n          var h = this.height();\n\n          this._display.moveTo(0, 0);\n\n          this._display.lineTo(w, h);\n        }\n      }\n    }\n  });\n  Object.defineProperty(Line, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Line\"\n  });\n  Object.defineProperty(Line, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Line.className])\n  });\n  return Line;\n}(Graphics);\n\nexport { Line };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Line.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAA8D,YAA9D;AAEA,OAAO,KAAK,KAAZ,MAAuB,cAAvB;AAoBA;;;;;AAKG;;AACH,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAA1B,WAAA,IAAA,GAAA;;AA0CC;;;;;;WAlCA,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;AAEA,UAAI,KAAK,OAAL,CAAa,QAAb,KAA0B,KAAK,OAAL,CAAa,UAAb,CAA1B,IAAsD,KAAK,UAA3D,IAAyE,KAAK,cAAL,CAAoB,OAApB,CAAzE,IAAyG,KAAK,cAAL,CAAoB,QAApB,CAA7G,EAA4I;AAC3I,aAAK,MAAL,GAAc,IAAd;AACA;AACD;;;;;;WAED,YAAA;AACC,MAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,UAAI,KAAK,MAAT,EAAiB;AAEhB,YAAM,MAAM,GAAG,KAAK,GAAL,CAAS,QAAT,CAAf;AACA,YAAM,QAAQ,GAAG,KAAK,GAAL,CAAS,UAAT,CAAjB;;AAEA,YAAI,MAAM,IAAI,MAAM,CAAC,MAAP,GAAgB,CAA9B,EAAiC;AAChC,cAAI,KAAK,GAAG,MAAM,CAAC,CAAD,CAAlB;;AAEA,eAAK,QAAL,CAAc,MAAd,CAAqB,KAAK,CAAC,CAA3B,EAA8B,KAAK,CAAC,CAApC;;AACA,UAAA,KAAK,CAAC,aAAN,CAAoB,KAAK,QAAzB,EAAmC,CAAC,CAAC,MAAD,CAAD,CAAnC;AACA,SALD,MAMK,IAAI,QAAJ,EAAc;AAClB,UAAA,KAAK,CAAC,aAAN,CAAoB,KAAK,QAAzB,EAAmC,QAAnC;AACA,SAFI,MAGA,IAAI,CAAC,KAAK,GAAL,CAAS,MAAT,CAAL,EAAuB;AAC3B,cAAI,CAAC,GAAG,KAAK,KAAL,EAAR;AACA,cAAI,CAAC,GAAG,KAAK,MAAL,EAAR;;AAEA,eAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,CAAxB;;AACA,eAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACA;AACD;AACD;;AApCD,EAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,IAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,IAAI,CAAC,SAAN,CAA3B;AAA1C,GAAA;AAoCD,SAAA,IAAA;AAAC,CA1CD,CAA0B,QAA1B,CAAA;;SAAa,I","sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport type { IPoint } from \"../util/IPoint\";\nimport * as $draw from \"../util/Draw\";\n\nexport interface ILineSettings extends IGraphicsSettings {\n\n\t/**\n\t * A list of [[IPoint]] (x/y coordinates) points for the line.\n\t */\n\tpoints?: Array<IPoint>;\n\n\t/**\n\t * A list of [[IPoint]] arrays for different segments of the line.\n\t * \n\t * @since 5.1.4\n\t */\n\tsegments?: Array<Array<Array<IPoint>>>;\n}\n\nexport interface ILinePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a line.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class Line extends Graphics {\n\n\tdeclare public _settings: ILineSettings;\n\tdeclare public _privateSettings: ILinePrivate;\n\n\tpublic static className: string = \"Line\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Line.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"points\") || this.isDirty(\"segments\") || this._sizeDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\n\t\t\tconst points = this.get(\"points\");\n\t\t\tconst segments = this.get(\"segments\");\n\n\t\t\tif (points && points.length > 0) {\n\t\t\t\tlet point = points[0];\n\n\t\t\t\tthis._display.moveTo(point.x, point.y);\n\t\t\t\t$draw.segmentedLine(this._display, [[points]]);\n\t\t\t}\n\t\t\telse if (segments) {\n\t\t\t\t$draw.segmentedLine(this._display, segments);\n\t\t\t}\n\t\t\telse if (!this.get(\"draw\")) {\n\t\t\t\tlet w = this.width();\n\t\t\t\tlet h = this.height();\n\n\t\t\t\tthis._display.moveTo(0, 0);\n\t\t\t\tthis._display.lineTo(w, h);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}