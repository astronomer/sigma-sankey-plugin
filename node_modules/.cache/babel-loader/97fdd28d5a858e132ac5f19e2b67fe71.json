{"ast":null,"code":"var _jsxFileName = \"/Users/medina/development/sigma-sankey-plugin/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useMemo, useRef } from \"react\";\nimport * as am5 from '@amcharts/amcharts5';\nimport * as am5Flow from '@amcharts/amcharts5/flow';\nimport { client, useConfig, useElementData } from \"@sigmacomputing/plugin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclient.config.configureEditorPanel([{\n  name: \"source\",\n  type: \"element\"\n}, {\n  name: \"dimension\",\n  type: \"column\",\n  source: \"source\",\n  allowMultiple: true\n}, {\n  name: \"measures\",\n  type: \"column\",\n  source: \"source\",\n  allowMultiple: true\n}]);\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const config = useConfig();\n  const sigmaData = useElementData(config.source);\n  const ref = useRef();\n  am5.ready(_s(function () {\n    _s();\n\n    const options = useMemo(() => {\n      const dimensions = config.dimension;\n      const measures = config.measures; // transform sigmaData --> sankey data\n\n      let dataMap = [];\n\n      if (dimensions && (sigmaData === null || sigmaData === void 0 ? void 0 : sigmaData[dimensions[0]])) {\n        for (let i = 0; i < dimensions.length - 1; i++) {\n          for (let j = 0; j < sigmaData[dimensions[i]].length; j++) {\n            const from = sigmaData[dimensions[i]][j];\n            const to = sigmaData[dimensions[i + 1]][j];\n            const weight = sigmaData[measures[i]][j];\n            const dataPoint = [from, to, weight];\n            dataMap[dataPoint] = dataPoint;\n          }\n        }\n\n        let data = [];\n        let i = 0;\n\n        for (var key in dataMap) {\n          data[i] = dataMap[key];\n          i++;\n        }\n      }\n    }, [config, sigmaData]);\n    let root = am5.Root.new(\"chartdiv\");\n    let series = root.container.children.push(am5Flow.Sankey.new(root, {\n      sourceIdField: \"from\",\n      targetIdField: \"to\",\n      valueField: \"value\",\n      paddingRight: 150,\n      nodeAlign: 'left',\n      nodePadding: 100,\n      nodeWidth: 8,\n      linkTension: 0,\n      idField: \"id\"\n    }));\n    series.links.template.setAll({\n      fillOpacity: 0.55,\n      fillStyle: \"source\",\n      controlPointDistance: 0\n    });\n    series.nodes.rectangles.template.adapters.add('tooltipText', function (tooltipText, target) {\n      const links = target.dataItem._settings.incomingLinks || [];\n      let toolTip = \"\";\n\n      if (links && links.length > 0) {\n        links.forEach(node => {\n          toolTip += `${node.dataContext.from} - ${node.dataContext.value} \\n`;\n        });\n      }\n\n      return toolTip;\n    });\n    series.nodes.labels.template.setAll({\n      text: \"[bold]{name}: {sumIncoming}\"\n    });\n    series.data.setAll(options);\n    this.root = root;\n    series.appear(1000, 500);\n  }, \"UfleS4trXWGxzhzYTKqqYygmjCE=\"));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chartdiv\",\n    style: {\n      width: \"100%\",\n      height: \"98vh\"\n    },\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"QopplIAJcjFSLG77pxSxcctPaTw=\", false, function () {\n  return [useConfig, useElementData];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/medina/development/sigma-sankey-plugin/src/App.js"],"names":["useMemo","useRef","am5","am5Flow","client","useConfig","useElementData","config","configureEditorPanel","name","type","source","allowMultiple","App","sigmaData","ref","ready","options","dimensions","dimension","measures","dataMap","i","length","j","from","to","weight","dataPoint","data","key","root","Root","new","series","container","children","push","Sankey","sourceIdField","targetIdField","valueField","paddingRight","nodeAlign","nodePadding","nodeWidth","linkTension","idField","links","template","setAll","fillOpacity","fillStyle","controlPointDistance","nodes","rectangles","adapters","add","tooltipText","target","dataItem","_settings","incomingLinks","toolTip","forEach","node","dataContext","value","labels","text","appear","width","height"],"mappings":"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","sourcesContent":["import \"./App.css\";\n\nimport { useMemo, useRef } from \"react\";\nimport * as am5 from '@amcharts/amcharts5';\nimport * as am5Flow from '@amcharts/amcharts5/flow';\n\nimport {\n  client,\n  useConfig,\n  useElementData,\n} from \"@sigmacomputing/plugin\";\n\nclient.config.configureEditorPanel([\n  { name: \"source\", type: \"element\" },\n  { name: \"dimension\", type: \"column\", source: \"source\", allowMultiple: true },\n  { name: \"measures\", type: \"column\", source: \"source\", allowMultiple: true },\n]);\n\nfunction App() {\n  const config = useConfig();\n  const sigmaData = useElementData(config.source);\n  const ref = useRef();\n\n  am5.ready(function () {\n\n    const options = useMemo(() => {\n      const dimensions = config.dimension;\n      const measures = config.measures;\n  \n      // transform sigmaData --> sankey data\n      let dataMap = [];\n      if (dimensions && sigmaData?.[dimensions[0]]) {\n        for (let i = 0; i < dimensions.length - 1; i++) {\n          for (let j = 0; j < sigmaData[dimensions[i]].length; j++) {\n            const from = sigmaData[dimensions[i]][j];\n            const to = sigmaData[dimensions[i + 1]][j];\n            const weight = sigmaData[measures[i]][j];\n            const dataPoint = [from, to, weight];\n            dataMap[dataPoint] = dataPoint;\n          }\n        }\n        let data = [];\n        let i = 0;\n        for (var key in dataMap) {\n          data[i] = dataMap[key];\n          i++;\n        }\n      }\n    }, [config, sigmaData]);\n    \n    let root = am5.Root.new(\"chartdiv\");\n    let series = root.container.children.push(\n      am5Flow.Sankey.new(root, {\n        sourceIdField: \"from\",\n        targetIdField: \"to\",\n        valueField: \"value\",\n        paddingRight: 150,\n        nodeAlign: 'left',\n        nodePadding: 100,\n        nodeWidth: 8,\n        linkTension: 0,\n        idField: \"id\",\n      })\n    );\n  \n    series.links.template.setAll({\n      fillOpacity: 0.55,\n      fillStyle: \"source\",\n      controlPointDistance: 0,\n    });\n  \n    series.nodes.rectangles.template.adapters.add('tooltipText', function(tooltipText, target) {\n      const links = target.dataItem._settings.incomingLinks || [];\n      let toolTip = \"\";\n  \n      if (links && links.length > 0) {\n        links.forEach((node) => {\n          toolTip += `${node.dataContext.from} - ${node.dataContext.value} \\n`;\n        });\n      } \n      return toolTip;\n    });\n  \n  \n    series.nodes.labels.template.setAll({\n      text: \"[bold]{name}: {sumIncoming}\"\n    });\n  \n    series.data.setAll(options);\n  \n    this.root = root;\n    series.appear(1000, 500);\n  });\n\n  return (\n    <div id=\"chartdiv\" style={{ width: \"100%\", height: \"98vh\"}} ref={ref}></div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}