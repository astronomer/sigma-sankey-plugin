{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A horizontal children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar HorizontalLayout =\n/** @class */\nfunction (_super) {\n  __extends(HorizontalLayout, _super);\n\n  function HorizontalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(HorizontalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var availableWidth = container.innerWidth();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childWidth = child.get(\"width\");\n\n            if (childWidth instanceof Percent) {\n              totalPercent += childWidth.value;\n              var w = availableWidth * childWidth.value;\n              var minWidth = child.get(\"minWidth\", -Infinity);\n\n              if (minWidth > w) {\n                availableWidth -= minWidth;\n                totalPercent -= childWidth.value;\n              }\n\n              var maxWidth = child.get(\"maxWidth\", Infinity);\n\n              if (w > maxWidth) {\n                availableWidth -= maxWidth;\n                totalPercent -= childWidth.value;\n              }\n            } else {\n              if (!$type.isNumber(childWidth)) {\n                childWidth = child.width();\n              }\n\n              availableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n            }\n          }\n        }\n      });\n\n      if (availableWidth > 0) {\n        eachChildren(container, function (child) {\n          if (child.isVisible()) {\n            if (child.get(\"position\") == \"relative\") {\n              var childWidth = child.get(\"width\");\n\n              if (childWidth instanceof Percent) {\n                var privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n                var minWidth = child.get(\"minWidth\", -Infinity);\n                var maxWidth = child.get(\"maxWidth\", Infinity);\n                privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n                child.setPrivate(\"width\", privateWidth);\n              }\n            }\n          }\n        });\n      }\n\n      var prevX = paddingLeft;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginLeft = child.get(\"marginLeft\", 0);\n            var marginRight = child.get(\"marginRight\", 0);\n            var x = prevX + marginLeft - bounds.left;\n            child.setPrivate(\"x\", x);\n            prevX = x + bounds.right + marginRight;\n          } else {\n            child.setPrivate(\"x\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(HorizontalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"HorizontalLayout\"\n  });\n  Object.defineProperty(HorizontalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([HorizontalLayout.className])\n  });\n  return HorizontalLayout;\n}(Layout);\n\nexport { HorizontalLayout };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/HorizontalLayout.ts"],"names":[],"mappings":"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","sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n/**\n * A horizontal children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class HorizontalLayout extends Layout {\n\n\tpublic static className: string = \"HorizontalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([HorizontalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\n\t\tlet paddingLeft = container.get(\"paddingLeft\", 0);\n\n\t\tlet availableWidth = container.innerWidth();\n\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childWidth.value;\n\n\t\t\t\t\t\tlet w = availableWidth * childWidth.value;\n\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", -Infinity);\n\t\t\t\t\t\tif (minWidth > w) {\n\t\t\t\t\t\t\tavailableWidth -= minWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", Infinity);\n\t\t\t\t\t\tif (w > maxWidth) {\n\t\t\t\t\t\t\tavailableWidth -= maxWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childWidth)) {\n\t\t\t\t\t\t\tchildWidth = child.width();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (availableWidth > 0) {\n\t\t\teachChildren(container, (child) => {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\t\tlet privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n\t\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", -Infinity);\n\t\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", Infinity);\n\t\t\t\t\t\t\tprivateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n\n\t\t\t\t\t\t\tchild.setPrivate(\"width\", privateWidth);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet prevX = paddingLeft;\n\n\t\teachChildren(container, (child) => {\n\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginLeft = child.get(\"marginLeft\", 0);\n\t\t\t\t\tlet marginRight = child.get(\"marginRight\", 0);\n\n\t\t\t\t\tlet x = prevX + marginLeft - bounds.left;\n\t\t\t\t\tchild.setPrivate(\"x\", x);\n\t\t\t\t\tprevX = x + bounds.right + marginRight;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tchild.setPrivate(\"x\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}