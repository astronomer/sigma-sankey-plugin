{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\n/**\r\n * Returns a `Promise` which can be used to execute code after number of\r\n * milliseconds.\r\n *\r\n * @param   ms  Sleep duration in ms\r\n * @return      Promise\r\n */\n\nexport function sleep(ms) {\n  return new Promise(function (resolve, _reject) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 365.242 / 12 * 86400000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\n\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n\n    case \"month\":\n      return \"year\";\n\n    case \"week\":\n      return \"month\";\n\n    case \"day\":\n      return \"month\";\n    // not a mistake\n\n    case \"hour\":\n      return \"day\";\n\n    case \"minute\":\n      return \"hour\";\n\n    case \"second\":\n      return \"minute\";\n\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\n\nexport function getDuration(unit, count) {\n  if (count == null) {\n    count = 1;\n  }\n\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * @ignore\r\n */\n\nexport function getIntervalDuration(interval) {\n  if (interval) {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  }\n\n  return 0;\n}\nexport function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {\n  var unit = interval.timeUnit;\n  var count = interval.count;\n\n  if (unit == \"hour\" || unit == \"minute\" || unit == \"second\" || unit == \"millisecond\") {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  } else {\n    var firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();\n    var lastTime = add(new Date(firstTime), unit, count, utc).getTime();\n    return lastTime - firstTime;\n  }\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\n\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\n\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @param date  Source date\r\n * @return Copy\r\n */\n\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @param timeOne  timestamp\r\n * @param timeTwo  timestamp\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\n\nexport function checkChange(timeOne, timeTwo, unit, utc, timezone) {\n  // quick\n  if (timeTwo - timeOne > getDuration(unit, 1.2)) {\n    return true;\n  }\n\n  var dateOne = new Date(timeOne);\n  var dateTwo = new Date(timeTwo);\n\n  if (timezone) {\n    dateOne = timezone.convertLocal(dateOne);\n    dateTwo = timezone.convertLocal(dateTwo);\n  }\n\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n\n  var changed = false;\n\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n\n      break;\n  }\n\n  if (changed) {\n    return changed;\n  }\n\n  var nextUnit = getNextUnit(unit);\n\n  if (nextUnit) {\n    return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\n\nexport function add(date, unit, count, utc) {\n  var timeZoneOffset = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff); // solves issues if newe time falls back to old time zone\n\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param utc              Use UTC timezone\r\n * @param firstDate        First date to round to\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\n\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {\n  if (!timezone || utc) {\n    var timeZoneOffset = 0;\n\n    if (!utc && unit != \"millisecond\") {\n      timeZoneOffset = date.getTimezoneOffset();\n      date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n    }\n\n    switch (unit) {\n      case \"day\":\n        var day = date.getUTCDate();\n\n        if (count > 1) {\n          //\tday = Math.floor(day / count) * count;\n          if (firstDate) {\n            firstDate = round(firstDate, \"day\", 1);\n            var difference = date.getTime() - firstDate.getTime();\n            var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n            var duration = getDuration(\"day\", unitCount * count);\n            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n          }\n        } else {\n          date.setUTCDate(day);\n        }\n\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"second\":\n        var seconds = date.getUTCSeconds();\n\n        if (count > 1) {\n          seconds = Math.floor(seconds / count) * count;\n        }\n\n        date.setUTCSeconds(seconds, 0);\n        break;\n\n      case \"millisecond\":\n        if (count == 1) {\n          return date; // much better for perf!\n        }\n\n        var milliseconds = date.getUTCMilliseconds();\n        milliseconds = Math.floor(milliseconds / count) * count;\n        date.setUTCMilliseconds(milliseconds);\n        break;\n\n      case \"hour\":\n        var hours = date.getUTCHours();\n\n        if (count > 1) {\n          hours = Math.floor(hours / count) * count;\n        }\n\n        date.setUTCHours(hours, 0, 0, 0);\n        break;\n\n      case \"minute\":\n        var minutes = date.getUTCMinutes();\n        milliseconds = date.getUTCMilliseconds();\n\n        if (count > 1) {\n          minutes = Math.floor(minutes / count) * count;\n        }\n\n        date.setUTCMinutes(minutes, 0, 0);\n        break;\n\n      case \"month\":\n        var month = date.getUTCMonth();\n\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n\n        date.setUTCMonth(month, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"year\":\n        var year = date.getUTCFullYear();\n\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n\n        date.setUTCFullYear(year, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"week\":\n        var wday = date.getUTCDate();\n        var weekDay = date.getUTCDay();\n\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n\n        if (weekDay >= firstDateOfWeek) {\n          wday = wday - weekDay + firstDateOfWeek;\n        } else {\n          wday = wday - (7 + weekDay) + firstDateOfWeek;\n        }\n\n        date.setUTCDate(wday);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n    }\n\n    if (!utc && unit != \"millisecond\") {\n      date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n      if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n        var newTimeZoneOffset = date.getTimezoneOffset();\n\n        if (newTimeZoneOffset != timeZoneOffset) {\n          var diff = newTimeZoneOffset - timeZoneOffset;\n          date.setUTCMinutes(date.getUTCMinutes() + diff);\n        }\n      }\n    }\n\n    return date;\n  } else {\n    var tzoffset = timezone.offsetUTC(date);\n    var timeZoneOffset = date.getTimezoneOffset();\n    var parsedDate = timezone.parseDate(date);\n    var year = parsedDate.year;\n    var month = parsedDate.month;\n    var day = parsedDate.day;\n    var hour = parsedDate.hour;\n    var minute = parsedDate.minute;\n    var second = parsedDate.second;\n    var millisecond = parsedDate.millisecond;\n\n    switch (unit) {\n      case \"day\":\n        if (firstDate) {\n          firstDate = round(firstDate, \"day\", 1);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n          year = date.getUTCFullYear();\n          month = date.getUTCMonth();\n          day = date.getUTCDate();\n        }\n\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"second\":\n        if (count > 1) {\n          second = Math.floor(second / count) * count;\n        }\n\n        millisecond = 0;\n        break;\n\n      case \"millisecond\":\n        if (count > 1) {\n          millisecond = Math.floor(millisecond / count) * count;\n        }\n\n        break;\n\n      case \"hour\":\n        if (count > 1) {\n          hour = Math.floor(hour / count) * count;\n        }\n\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"minute\":\n        if (count > 1) {\n          minute = Math.floor(minute / count) * count;\n        }\n\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"month\":\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n\n        day = 1;\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"year\":\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n\n        month = 0;\n        day = 1;\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"week\":\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n\n        var wday = date.getUTCDate();\n        var weekDay = date.getUTCDay();\n\n        if (weekDay >= firstDateOfWeek) {\n          wday = wday - weekDay + firstDateOfWeek;\n        } else {\n          wday = wday - (7 + weekDay) + firstDateOfWeek;\n        }\n\n        day = wday;\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n    }\n\n    minute += tzoffset - timeZoneOffset;\n    date = new Date(year, month, day, hour, minute, second, millisecond);\n    var newOffset = date.getTimezoneOffset();\n\n    if (newOffset != timeZoneOffset) {\n      date.setTime(date.getTime() + (timeZoneOffset - newOffset) * 60000);\n    }\n\n    return date;\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function chooseInterval(index, duration, gridCount, intervals) {\n  var gridInterval = intervals[index];\n  var intervalDuration = getIntervalDuration(gridInterval);\n  var lastIndex = intervals.length - 1;\n\n  if (index >= lastIndex) {\n    return __assign({}, intervals[lastIndex]);\n  }\n\n  var count = Math.ceil(duration / intervalDuration);\n\n  if (duration < intervalDuration && index > 0) {\n    return __assign({}, intervals[index - 1]);\n  }\n\n  if (count <= gridCount) {\n    return __assign({}, intervals[index]);\n  } else {\n    if (index + 1 < intervals.length) {\n      return chooseInterval(index + 1, duration, gridCount, intervals);\n    } else {\n      return __assign({}, intervals[index]);\n    }\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function getUnitValue(date, unit) {\n  switch (unit) {\n    case \"day\":\n      return date.getDate();\n\n    case \"second\":\n      return date.getSeconds();\n\n    case \"millisecond\":\n      return date.getMilliseconds();\n\n    case \"hour\":\n      return date.getHours();\n\n    case \"minute\":\n      return date.getMinutes();\n\n    case \"month\":\n      return date.getMonth();\n\n    case \"year\":\n      return date.getFullYear();\n\n    case \"week\":\n      return $utils.getWeek(date);\n  }\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/util/Time.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nimport type { Timezone } from \"./Timezone\";\n\nexport type TimeUnit = \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\" | \"year\";\n\nexport interface ITimeInterval {\n\ttimeUnit: TimeUnit;\n\tcount: number;\n}\n\n\n/**\n * Returns a `Promise` which can be used to execute code after number of\n * milliseconds.\n *\n * @param   ms  Sleep duration in ms\n * @return      Promise\n */\nexport function sleep(ms: number): Promise<void> {\n\treturn new Promise((resolve, _reject) => {\n\t\tsetTimeout(resolve, ms);\n\t});\n}\n\n\n/**\n * Maps time period names to their numeric representations in milliseconds.\n *\n * @ignore Exclude from docs\n */\nexport let timeUnitDurations: { [Key in TimeUnit]: number } = {\n\tmillisecond: 1,\n\tsecond: 1000,\n\tminute: 60000,\n\thour: 3600000,\n\tday: 86400000,\n\tweek: 604800000,\n\tmonth: 365.242 / 12 * 86400000,\n\tyear: 31536000000\n};\n\n/**\n * Returns the next time unit that goes after source `unit`.\n *\n * E.g. \"hour\" is the next unit after \"minute\", etc.\n *\n * @ignore Exclude from docs\n * @param unit  Source time unit\n * @return Next time unit\n */\nexport function getNextUnit(unit: TimeUnit): TimeUnit | undefined {\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\treturn;\n\t\tcase \"month\":\n\t\t\treturn \"year\";\n\n\t\tcase \"week\":\n\t\t\treturn \"month\";\n\n\t\tcase \"day\":\n\t\t\treturn \"month\"; // not a mistake\n\n\t\tcase \"hour\":\n\t\t\treturn \"day\";\n\n\t\tcase \"minute\":\n\t\t\treturn \"hour\";\n\n\t\tcase \"second\":\n\t\t\treturn \"minute\"\n\n\t\tcase \"millisecond\":\n\t\t\treturn \"second\";\n\t}\n}\n\n/**\n * Returns number of milliseconds in the `count` of time `unit`.\n *\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\n * \"month\", and \"year\".\n *\n * @param unit   Time unit\n * @param count  Number of units\n * @return Milliseconds\n */\nexport function getDuration(unit: TimeUnit, count?: number): number {\n\tif (count == null) {\n\t\tcount = 1;\n\t}\n\treturn timeUnitDurations[unit] * count;\n}\n\n/**\n * @ignore\n */\nexport function getIntervalDuration(interval: ITimeInterval | undefined) {\n\tif (interval) {\n\t\treturn timeUnitDurations[interval.timeUnit] * interval.count;\n\t}\n\treturn 0;\n}\n\n\nexport function getDateIntervalDuration(interval: ITimeInterval, date: Date, firstDateOfWeek?: number, utc?: boolean, timezone?: Timezone) {\n\tconst unit = interval.timeUnit;\n\tconst count = interval.count;\n\tif (unit == \"hour\" || unit == \"minute\" || unit == \"second\" || unit == \"millisecond\") {\n\t\treturn timeUnitDurations[interval.timeUnit] * interval.count;\n\t}\n\telse {\n\t\tconst firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();\n\t\tconst lastTime = add(new Date(firstTime), unit, count, utc).getTime();\n\t\treturn lastTime - firstTime;\n\t}\n}\n\n/**\n * Returns current `Date` object.\n *\n * @return Current date\n */\nexport function now(): Date {\n\treturn new Date();\n}\n\n/**\n * Returns current timestamp.\n *\n * @return Current timestamp\n */\nexport function getTime(): number {\n\treturn now().getTime();\n}\n\n/**\n * Returns a copy of the `Date` object.\n *\n * @param date  Source date\n * @return Copy\n */\nexport function copy(date: Date): Date {\n\treturn new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n\n/**\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\n * represent a \"range\" of time, rather the same time date.\n *\n * @param timeOne  timestamp\n * @param timeTwo  timestamp\n * @param unit     Time unit to check\n * @return Range?\n */\nexport function checkChange(timeOne: number, timeTwo: number, unit: TimeUnit, utc?: boolean, timezone?: Timezone): boolean {\n\t// quick\n\tif ((timeTwo - timeOne) > getDuration(unit, 1.2)) {\n\t\treturn true;\n\t}\n\n\tlet dateOne = new Date(timeOne);\n\tlet dateTwo = new Date(timeTwo);\n\n\tif (timezone) {\n\t\tdateOne = timezone.convertLocal(dateOne);\n\t\tdateTwo = timezone.convertLocal(dateTwo);\n\t}\n\n\tlet timeZoneOffset1 = 0;\n\tlet timeZoneOffset2 = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset1 = dateOne.getTimezoneOffset();\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n\n\t\ttimeZoneOffset2 = dateTwo.getTimezoneOffset();\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n\t}\n\n\tlet changed = false;\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"month\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"day\":\n\t\t\tif (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tif (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tif (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tif (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tif (dateOne.getTime() != dateTwo.getTime()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif (changed) {\n\t\treturn changed;\n\t}\n\n\tlet nextUnit = getNextUnit(unit);\n\tif (nextUnit) {\n\t\treturn checkChange(timeOne, timeTwo, nextUnit, utc, timezone);\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n/**\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\n *\n * @param date   Source date\n * @param unit   Time unit\n * @param count  Number of units to add\n * @return Modified date\n */\nexport function add(date: Date, unit: TimeUnit, count: number, utc?: boolean): Date {\n\tlet timeZoneOffset = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset = date.getTimezoneOffset();\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n\t}\n\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\tlet day: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(day + count);\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tlet seconds: number = date.getUTCSeconds();\n\t\t\tdate.setUTCSeconds(seconds + count);\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tlet milliseconds: number = date.getUTCMilliseconds();\n\t\t\tdate.setUTCMilliseconds(milliseconds + count);\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tlet hours: number = date.getUTCHours();\n\t\t\tdate.setUTCHours(hours + count);\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tlet minutes: number = date.getUTCMinutes();\n\t\t\tdate.setUTCMinutes(minutes + count);\n\t\t\tbreak;\n\n\t\tcase \"year\":\n\t\t\tlet year: number = date.getUTCFullYear();\n\t\t\tdate.setUTCFullYear(year + count);\n\t\t\tbreak;\n\n\t\tcase \"month\":\n\t\t\tlet month: number = date.getUTCMonth();\n\t\t\tdate.setUTCMonth(month + count);\n\t\t\tbreak;\n\n\t\tcase \"week\":\n\t\t\tlet wday: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(wday + count * 7);\n\t\t\tbreak;\n\t}\n\tif (!utc && unit != \"millisecond\") {\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\t\t\t\t// solves issues if newe time falls back to old time zone\n\t\t\t\tif (date.getTimezoneOffset() != newTimeZoneOffset) {\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - diff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn date;\n}\n\n\n/**\n * \"Rounds\" the date to specific time unit.\n *\n * @param date             Source date\n * @param unit             Time unit\n * @param count            Number of units to round to\n * @param firstDateOfWeek  First day of week\n * @param utc              Use UTC timezone\n * @param firstDate        First date to round to\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\n * @param timezone         Use specific named timezone when rounding\n * @return New date\n */\nexport function round(date: Date, unit: TimeUnit, count: number, firstDateOfWeek?: number, utc?: boolean, firstDate?: Date, timezone?: Timezone): Date {\n\tif (!timezone || utc) {\n\n\t\tlet timeZoneOffset = 0;\n\n\t\tif (!utc && unit != \"millisecond\") {\n\t\t\ttimeZoneOffset = date.getTimezoneOffset();\n\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\t\t\t\n\t\t}\n\n\t\tswitch (unit) {\n\n\t\t\tcase \"day\":\n\t\t\t\tlet day = date.getUTCDate();\n\n\t\t\t\tif (count > 1) {\n\t\t\t\t\t//\tday = Math.floor(day / count) * count;\n\t\t\t\t\tif (firstDate) {\n\t\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\n\n\t\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\n\t\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\n\t\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdate.setUTCDate(day);\n\t\t\t\t}\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"second\":\n\t\t\t\tlet seconds = date.getUTCSeconds();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tseconds = Math.floor(seconds / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCSeconds(seconds, 0);\n\t\t\t\tbreak;\n\n\t\t\tcase \"millisecond\":\n\t\t\t\tif (count == 1) {\n\t\t\t\t\treturn date; // much better for perf!\n\t\t\t\t}\n\n\t\t\t\tlet milliseconds = date.getUTCMilliseconds();\n\t\t\t\tmilliseconds = Math.floor(milliseconds / count) * count;\n\t\t\t\tdate.setUTCMilliseconds(milliseconds);\n\t\t\t\tbreak;\n\n\t\t\tcase \"hour\":\n\n\t\t\t\tlet hours = date.getUTCHours();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\thours = Math.floor(hours / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCHours(hours, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"minute\":\n\n\t\t\t\tlet minutes = date.getUTCMinutes();\n\t\t\t\tmilliseconds = date.getUTCMilliseconds();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tminutes = Math.floor(minutes / count) * count;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCMinutes(minutes, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"month\":\n\n\t\t\t\tlet month = date.getUTCMonth();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmonth = Math.floor(month / count) * count;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCMonth(month, 1);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"year\":\n\n\t\t\t\tlet year = date.getUTCFullYear();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tyear = Math.floor(year / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCFullYear(year, 0, 1);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\t\t\t\tbreak;\n\n\t\t\tcase \"week\":\n\n\t\t\t\tlet wday = date.getUTCDate();\n\t\t\t\tlet weekDay = date.getUTCDay();\n\n\t\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\n\t\t\t\t\tfirstDateOfWeek = 1;\n\t\t\t\t}\n\n\t\t\t\tif (weekDay >= firstDateOfWeek) {\n\t\t\t\t\twday = wday - weekDay + firstDateOfWeek;\n\t\t\t\t} else {\n\t\t\t\t\twday = wday - (7 + weekDay) + firstDateOfWeek;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCDate(wday);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\t\t}\n\t\tif (!utc && unit != \"millisecond\") {\n\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n\t\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\t\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn date;\n\t}\n\telse {\n\t\tlet tzoffset = timezone.offsetUTC(date);\n\t\tlet timeZoneOffset = date.getTimezoneOffset();\n\t\tconst parsedDate = timezone.parseDate(date);\n\t\tlet year = parsedDate.year;\n\t\tlet month = parsedDate.month;\n\t\tlet day = parsedDate.day;\n\t\tlet hour = parsedDate.hour;\n\t\tlet minute = parsedDate.minute;\n\t\tlet second = parsedDate.second;\n\t\tlet millisecond = parsedDate.millisecond;\n\n\t\tswitch (unit) {\n\n\t\t\tcase \"day\":\n\t\t\t\tif (firstDate) {\n\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\n\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\n\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\n\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n\t\t\t\t\tyear = date.getUTCFullYear();\n\t\t\t\t\tmonth = date.getUTCMonth();\n\t\t\t\t\tday = date.getUTCDate();\n\t\t\t\t}\n\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"second\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tsecond = Math.floor(second / count) * count;\n\t\t\t\t}\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"millisecond\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmillisecond = Math.floor(millisecond / count) * count;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"hour\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\thour = Math.floor(hour / count) * count;\n\t\t\t\t}\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"minute\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tminute = Math.floor(minute / count) * count;\n\t\t\t\t}\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"month\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmonth = Math.floor(month / count) * count;\n\t\t\t\t}\n\t\t\t\tday = 1;\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"year\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tyear = Math.floor(year / count) * count;\n\t\t\t\t}\n\t\t\t\tmonth = 0;\n\t\t\t\tday = 1;\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"week\":\n\t\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\n\t\t\t\t\tfirstDateOfWeek = 1;\n\t\t\t\t}\n\n\t\t\t\tlet wday = date.getUTCDate();\n\t\t\t\tlet weekDay = date.getUTCDay();\n\n\t\t\t\tif (weekDay >= firstDateOfWeek) {\n\t\t\t\t\twday = wday - weekDay + firstDateOfWeek;\n\t\t\t\t} else {\n\t\t\t\t\twday = wday - (7 + weekDay) + firstDateOfWeek;\n\t\t\t\t}\n\n\t\t\t\tday = wday;\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tminute += tzoffset - timeZoneOffset;\t\t\n\t\tdate = new Date(year, month, day, hour, minute, second, millisecond);\n\n\t\tlet newOffset = date.getTimezoneOffset();\n\t\tif(newOffset != timeZoneOffset){\n\t\t\tdate.setTime(date.getTime() + (timeZoneOffset - newOffset) * 60000);\n\t\t}\n\n\t\treturn date;\n\t}\n}\n\n/**\n * @ignore\n */\nexport function chooseInterval(index: number, duration: number, gridCount: number, intervals: Array<ITimeInterval>): ITimeInterval {\n\tlet gridInterval: ITimeInterval = intervals[index];\n\tlet intervalDuration = getIntervalDuration(gridInterval);\n\n\tlet lastIndex = intervals.length - 1;\n\tif (index >= lastIndex) {\n\t\treturn { ...intervals[lastIndex] };\n\t}\n\n\tlet count = Math.ceil(duration / intervalDuration);\n\n\tif (duration < intervalDuration && index > 0) {\n\t\treturn { ...intervals[index - 1] };\n\t}\n\tif (count <= gridCount) {\n\t\treturn { ...intervals[index] };\n\t} else {\n\t\tif (index + 1 < intervals.length) {\n\t\t\treturn chooseInterval(index + 1, duration, gridCount, intervals);\n\t\t} else {\n\t\t\treturn { ...intervals[index] };\n\t\t}\n\t}\n}\n\n/**\n * @ignore\n */\nexport function getUnitValue(date: Date, unit: TimeUnit) {\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\treturn date.getDate();\n\t\tcase \"second\":\n\t\t\treturn date.getSeconds();\n\t\tcase \"millisecond\":\n\t\t\treturn date.getMilliseconds();\n\t\tcase \"hour\":\n\t\t\treturn date.getHours();\n\t\tcase \"minute\":\n\t\t\treturn date.getMinutes();\n\t\tcase \"month\":\n\t\t\treturn date.getMonth();\n\t\tcase \"year\":\n\t\t\treturn date.getFullYear();\n\t\tcase \"week\":\n\t\t\treturn $utils.getWeek(date);\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}