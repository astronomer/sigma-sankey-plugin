{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Theme } from \"../../core/Theme\";\nimport { percent, p100, p50 } from \"../../core/util/Percent\";\nimport { ColorSet } from \"../../core/util/ColorSet\";\nimport { setColor } from \"../../themes/DefaultTheme\";\nimport * as $array from \"../../core/util/Array\";\n/**\r\n * @ignore\r\n */\n\nvar FlowDefaultTheme =\n/** @class */\nfunction (_super) {\n  __extends(FlowDefaultTheme, _super);\n\n  function FlowDefaultTheme() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(FlowDefaultTheme.prototype, \"setupDefaultRules\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype.setupDefaultRules.call(this);\n\n      var ic = this._root.interfaceColors;\n      var r = this.rule.bind(this);\n      /**\r\n       * ========================================================================\r\n       * charts/flow\r\n       * ========================================================================\r\n       */\n\n      r(\"Flow\").setAll({\n        width: p100,\n        height: p100,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingTop: 10,\n        paddingBottom: 10\n      });\n      r(\"FlowNodes\").setAll({\n        colors: ColorSet.new(this._root, {}),\n        legendLabelText: \"{name}\",\n        legendValueText: \"{sumOutgoing.formatNumber('#.#')}\"\n      });\n      r(\"FlowNode\").setAll({});\n      r(\"FlowNode\", [\"unknown\"]).setAll({\n        draggable: false,\n        opacity: 0\n      });\n      r(\"RadialLabel\", [\"flow\", \"node\"]).setAll({\n        text: \"{name}\",\n        populateText: true\n      });\n      r(\"FlowLink\").setAll({\n        fillStyle: \"gradient\",\n        strokeStyle: \"gradient\"\n      });\n      r(\"FlowLink\", [\"source\", \"unknown\"]).setAll({});\n      r(\"FlowLink\", [\"target\", \"unknown\"]).setAll({});\n      r(\"FlowNode\").events.on(\"pointerover\", function (e) {\n        var dataItem = e.target.dataItem;\n\n        if (dataItem) {\n          var outgoing = dataItem.get(\"outgoingLinks\");\n\n          if (outgoing) {\n            $array.each(outgoing, function (linkDataItem) {\n              var link = linkDataItem.get(\"link\");\n              link.hover();\n              link.hideTooltip();\n            });\n          }\n\n          var incoming = dataItem.get(\"incomingLinks\");\n\n          if (incoming) {\n            $array.each(incoming, function (linkDataItem) {\n              var link = linkDataItem.get(\"link\");\n              link.hover();\n              link.hideTooltip();\n            });\n          }\n        }\n\n        var rectangle = dataItem.get(\"slice\") || dataItem.get(\"rectangle\");\n\n        if (rectangle && rectangle.get(\"tooltipText\")) {\n          rectangle.showTooltip();\n        }\n      });\n      r(\"FlowNode\").events.on(\"pointerout\", function (e) {\n        var dataItem = e.target.dataItem;\n\n        if (dataItem) {\n          var outgoing = dataItem.get(\"outgoingLinks\");\n\n          if (outgoing) {\n            $array.each(outgoing, function (linkDataItem) {\n              linkDataItem.get(\"link\").unhover();\n            });\n          }\n\n          var incoming = dataItem.get(\"incomingLinks\");\n\n          if (incoming) {\n            $array.each(incoming, function (linkDataItem) {\n              linkDataItem.get(\"link\").unhover();\n            });\n          }\n        }\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * charts/flow: Sankey\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Sankey\").setAll({\n        orientation: \"horizontal\",\n        nodeAlign: \"justify\",\n        linkTension: 0.5,\n        nodePadding: 10,\n        nodeWidth: 10\n      }); // Class: RoundedRectangle\n\n      r(\"RoundedRectangle\", [\"sankey\", \"node\", \"shape\"]).setAll({\n        cornerRadiusTL: 0,\n        cornerRadiusBL: 0,\n        cornerRadiusTR: 0,\n        cornerRadiusBR: 0\n      });\n      r(\"SankeyLink\").setAll({\n        controlPointDistance: 0.2\n      });\n      r(\"FlowNode\", [\"sankey\"]).setAll({\n        draggable: true\n      });\n      {\n        var rule = r(\"Graphics\", [\"sankey\", \"link\"]);\n        rule.setAll({\n          fillOpacity: 0.2,\n          strokeOpacity: 0,\n          interactive: true,\n          tooltipText: \"{sourceId} - {targetId}: {value}\"\n        });\n        setColor(rule, \"fill\", ic, \"grid\");\n      }\n      r(\"Graphics\", [\"sankey\", \"link\"]).states.create(\"hover\", {\n        fillOpacity: 0.5\n      });\n      r(\"Label\", [\"sankey\", \"node\"]).setAll({\n        text: \"{name}\",\n        populateText: true\n      });\n      r(\"Label\", [\"sankey\", \"horizontal\"]).setAll({\n        y: p50,\n        centerY: p50,\n        paddingLeft: 15\n      });\n      r(\"Label\", [\"sankey\", \"vertical\"]).setAll({\n        x: p50,\n        centerX: p50,\n        paddingTop: 15\n      });\n      /**\r\n       * ------------------------------------------------------------------------\r\n       * charts/flow: Chord\r\n       * ------------------------------------------------------------------------\r\n       */\n\n      r(\"Chord\").setAll({\n        radius: percent(90),\n        nodeWidth: 10,\n        padAngle: 1,\n        startAngle: 0,\n        sort: \"descending\"\n      });\n      r(\"ChordDirected\").setAll({\n        linkHeadRadius: 10\n      });\n      r(\"ChordNodes\").setAll({\n        x: p50,\n        y: p50\n      });\n      r(\"FlowNode\", [\"chord\"]).setAll({\n        draggable: true\n      });\n      r(\"ChordLink\").setAll({\n        sourceRadius: p100,\n        targetRadius: p100,\n        fillStyle: \"solid\",\n        strokeStyle: \"solid\",\n        tooltipText: \"{sourceId} - {targetId}: {value}\"\n      });\n      r(\"Slice\", [\"chord\", \"node\", \"shape\"]).setAll({\n        cornerRadius: 0\n      });\n      r(\"RadialLabel\", [\"chord\", \"node\"]).setAll({\n        radius: 5,\n        textType: \"circular\"\n      });\n      r(\"ChordLinkDirected\").setAll({\n        headRadius: 10\n      }); // Class: Graphics\n\n      {\n        var rule = r(\"Graphics\", [\"chord\", \"link\", \"shape\"]);\n        rule.setAll({\n          fillOpacity: 0.2,\n          strokeOpacity: 0,\n          interactive: true\n        });\n        setColor(rule, \"fill\", ic, \"grid\");\n        setColor(rule, \"stroke\", ic, \"grid\");\n      }\n      r(\"Graphics\", [\"chord\", \"link\", \"shape\"]).states.create(\"hover\", {\n        fillOpacity: 0.5\n      });\n      r(\"ChordNonRibbon\").setAll({\n        linkType: \"curve\" // \"line\" | \"curve\"\n\n      });\n      r(\"ChordLink\", [\"basic\"]).setAll({\n        fillStyle: \"none\",\n        strokeStyle: \"source\"\n      });\n      r(\"Graphics\", [\"chord\", \"link\", \"shape\", \"basic\"]).setAll({\n        strokeOpacity: 0.4\n      });\n      r(\"Graphics\", [\"chord\", \"link\", \"shape\", \"basic\"]).states.create(\"hover\", {\n        strokeWidth: 2,\n        strokeOpacity: 1\n      });\n    }\n  });\n  return FlowDefaultTheme;\n}(Theme);\n\nexport { FlowDefaultTheme };","map":{"version":3,"sources":["../../../../../src/.internal/charts/flow/FlowDefaultTheme.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\r\nimport type { IFlowNodesDataItem } from \"../../charts/flow/FlowNodes\";\r\n\r\nimport { Theme } from \"../../core/Theme\";\r\nimport { percent, p100, p50 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\nimport * as $array from \"../../core/util/Array\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class FlowDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/flow\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"Flow\").setAll({\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100,\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\tr(\"FlowNodes\").setAll({\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\tlegendLabelText: \"{name}\",\r\n\t\t\tlegendValueText: \"{sumOutgoing.formatNumber('#.#')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FlowNode\").setAll({\r\n\r\n\t\t});\r\n\r\n\t\tr(\"FlowNode\", [\"unknown\"]).setAll({\r\n\t\t\tdraggable: false,\r\n\t\t\topacity: 0\r\n\t\t});\r\n\r\n\t\tr(\"RadialLabel\", [\"flow\", \"node\"]).setAll({\r\n\t\t\ttext: \"{name}\",\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"FlowLink\").setAll({\r\n\t\t\tfillStyle: \"gradient\",\r\n\t\t\tstrokeStyle: \"gradient\"\r\n\t\t});\r\n\r\n\t\tr(\"FlowLink\", [\"source\", \"unknown\"]).setAll({\r\n\t\t});\r\n\r\n\t\tr(\"FlowLink\", [\"target\", \"unknown\"]).setAll({\r\n\t\t});\r\n\r\n\r\n\t\tr(\"FlowNode\").events.on(\"pointerover\", (e) => {\r\n\t\t\tconst dataItem = e.target.dataItem as DataItem<IFlowNodesDataItem>;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tconst outgoing = dataItem.get(\"outgoingLinks\")\r\n\t\t\t\tif (outgoing) {\r\n\t\t\t\t\t$array.each(outgoing, (linkDataItem) => {\r\n\t\t\t\t\t\tconst link = (linkDataItem as any).get(\"link\");\r\n\t\t\t\t\t\tlink.hover();\r\n\t\t\t\t\t\tlink.hideTooltip();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tconst incoming = dataItem.get(\"incomingLinks\")\r\n\t\t\t\tif (incoming) {\r\n\t\t\t\t\t$array.each(incoming, (linkDataItem) => {\r\n\t\t\t\t\t\tconst link = (linkDataItem as any).get(\"link\");\r\n\t\t\t\t\t\tlink.hover();\r\n\t\t\t\t\t\tlink.hideTooltip();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rectangle = (<any>dataItem).get(\"slice\") || (<any>dataItem).get(\"rectangle\");\r\n\t\t\tif (rectangle && rectangle.get(\"tooltipText\")) {\r\n\t\t\t\trectangle.showTooltip();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tr(\"FlowNode\").events.on(\"pointerout\", (e) => {\r\n\t\t\tconst dataItem = e.target.dataItem as DataItem<IFlowNodesDataItem>;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tconst outgoing = dataItem.get(\"outgoingLinks\")\r\n\t\t\t\tif (outgoing) {\r\n\t\t\t\t\t$array.each(outgoing, (linkDataItem) => {\r\n\t\t\t\t\t\t(linkDataItem as any).get(\"link\").unhover();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tconst incoming = dataItem.get(\"incomingLinks\")\r\n\t\t\t\tif (incoming) {\r\n\t\t\t\t\t$array.each(incoming, (linkDataItem) => {\r\n\t\t\t\t\t\t(linkDataItem as any).get(\"link\").unhover();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/flow: Sankey\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"Sankey\").setAll({\r\n\t\t\torientation: \"horizontal\",\r\n\t\t\tnodeAlign: \"justify\",\r\n\t\t\tlinkTension: 0.5,\r\n\t\t\tnodePadding: 10,\r\n\t\t\tnodeWidth: 10\r\n\t\t});\r\n\r\n\t\t// Class: RoundedRectangle\r\n\t\tr(\"RoundedRectangle\", [\"sankey\", \"node\", \"shape\"]).setAll({\r\n\t\t\tcornerRadiusTL: 0,\r\n\t\t\tcornerRadiusBL: 0,\r\n\t\t\tcornerRadiusTR: 0,\r\n\t\t\tcornerRadiusBR: 0\r\n\t\t});\r\n\r\n\t\tr(\"SankeyLink\").setAll({\r\n\t\t\tcontrolPointDistance: 0.2\r\n\t\t});\r\n\r\n\t\tr(\"FlowNode\", [\"sankey\"]).setAll({\r\n\t\t\tdraggable: true\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"sankey\", \"link\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2,\r\n\t\t\t\tstrokeOpacity: 0,\r\n\t\t\t\tinteractive: true,\r\n\t\t\t\ttooltipText: \"{sourceId} - {targetId}: {value}\"\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"grid\");\r\n\t\t}\r\n\r\n\t\tr(\"Graphics\", [\"sankey\", \"link\"]).states.create(\"hover\", { fillOpacity: 0.5 });\r\n\r\n\t\tr(\"Label\", [\"sankey\", \"node\"]).setAll({\r\n\t\t\ttext: \"{name}\",\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"sankey\", \"horizontal\"]).setAll({\r\n\t\t\ty: p50,\r\n\t\t\tcenterY: p50,\r\n\t\t\tpaddingLeft: 15\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"sankey\", \"vertical\"]).setAll({\r\n\t\t\tx: p50,\r\n\t\t\tcenterX: p50,\r\n\t\t\tpaddingTop: 15\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/flow: Chord\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"Chord\").setAll({\r\n\t\t\tradius: percent(90),\r\n\t\t\tnodeWidth: 10,\r\n\t\t\tpadAngle: 1,\r\n\t\t\tstartAngle: 0,\r\n\t\t\tsort: \"descending\"\r\n\t\t});\r\n\r\n\t\tr(\"ChordDirected\").setAll({\r\n\t\t\tlinkHeadRadius: 10\r\n\t\t});\r\n\r\n\t\tr(\"ChordNodes\").setAll({\r\n\t\t\tx: p50,\r\n\t\t\ty: p50\r\n\t\t});\r\n\r\n\t\tr(\"FlowNode\", [\"chord\"]).setAll({\r\n\t\t\tdraggable: true\r\n\t\t});\r\n\r\n\t\tr(\"ChordLink\").setAll({\r\n\t\t\tsourceRadius: p100,\r\n\t\t\ttargetRadius: p100,\r\n\t\t\tfillStyle: \"solid\",\r\n\t\t\tstrokeStyle: \"solid\",\r\n\t\t\ttooltipText: \"{sourceId} - {targetId}: {value}\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"chord\", \"node\", \"shape\"]).setAll({\r\n\t\t\tcornerRadius: 0\r\n\t\t})\r\n\r\n\t\tr(\"RadialLabel\", [\"chord\", \"node\"]).setAll({\r\n\t\t\tradius: 5,\r\n\t\t\ttextType: \"circular\"\r\n\t\t});\r\n\r\n\t\tr(\"ChordLinkDirected\").setAll({\r\n\t\t\theadRadius: 10\r\n\t\t});\r\n\r\n\t\t// Class: Graphics\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"chord\", \"link\", \"shape\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2,\r\n\t\t\t\tstrokeOpacity: 0,\r\n\t\t\t\tinteractive: true\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"grid\");\r\n\t\t\tsetColor(rule, \"stroke\", ic, \"grid\");\r\n\t\t}\r\n\r\n\t\tr(\"Graphics\", [\"chord\", \"link\", \"shape\"]).states.create(\"hover\", { fillOpacity: 0.5 });\r\n\r\n\t\tr(\"ChordNonRibbon\").setAll({\r\n\t\t\tlinkType: \"curve\" // \"line\" | \"curve\"\r\n\t\t})\r\n\r\n\t\tr(\"ChordLink\", [\"basic\"]).setAll({\r\n\t\t\tfillStyle: \"none\",\r\n\t\t\tstrokeStyle: \"source\"\r\n\t\t});\r\n\r\n\t\tr(\"Graphics\", [\"chord\", \"link\", \"shape\", \"basic\"]).setAll({\r\n\t\t\tstrokeOpacity: 0.4\r\n\t\t});\r\n\r\n\t\tr(\"Graphics\", [\"chord\", \"link\", \"shape\", \"basic\"]).states.create(\"hover\", { strokeWidth: 2, strokeOpacity: 1 });\r\n\r\n\t}\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}