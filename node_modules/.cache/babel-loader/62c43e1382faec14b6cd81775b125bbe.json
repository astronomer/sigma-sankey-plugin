{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { FlowLink } from \"./FlowLink\";\nimport * as $math from \"../../core/util/Math\";\n/**\r\n * A link element used in [[Chord]] chart.\r\n */\n\nvar ChordLink =\n/** @class */\nfunction (_super) {\n  __extends(ChordLink, _super);\n\n  function ChordLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_p0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_p1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_type\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(ChordLink.prototype, \"getPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (location) {\n      if (this._p0 && this._p1) {\n        if (this._type === \"line\") {\n          var p = $math.getPointOnLine(this._p0, this._p1, location);\n          return {\n            x: p.x,\n            y: p.y,\n            angle: $math.getAngle(this._p0, this._p1)\n          };\n        } else {\n          var p0 = $math.getPointOnQuadraticCurve(this._p0, this._p1, {\n            x: 0,\n            y: 0\n          }, Math.max(0, location - 0.01));\n          var p1 = $math.getPointOnQuadraticCurve(this._p0, this._p1, {\n            x: 0,\n            y: 0\n          }, Math.min(1, location + 0.01));\n          var p = $math.getPointOnQuadraticCurve(this._p0, this._p1, {\n            x: 0,\n            y: 0\n          }, location);\n          return {\n            x: p.x,\n            y: p.y,\n            angle: $math.getAngle(p0, p1)\n          };\n        }\n      }\n\n      return {\n        x: 0,\n        y: 0,\n        angle: 0\n      };\n    }\n  });\n  Object.defineProperty(ChordLink, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ChordLink\"\n  });\n  Object.defineProperty(ChordLink, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: FlowLink.classNames.concat([ChordLink.className])\n  });\n  return ChordLink;\n}(FlowLink);\n\nexport { ChordLink };","map":{"version":3,"sources":["../../../../../src/.internal/charts/flow/ChordLink.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAA8D,YAA9D;AAMA,OAAO,KAAK,KAAZ,MAAuB,sBAAvB;AA6BA;;AAEG;;AACH,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAA/B,WAAA,SAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAEC,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,KAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,KAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;AAEA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA,OAAA,EAAA;sBAAA;wBAAA;oBAAA;;AAAA,KAAA;;AA4BA;;;;;;WAhBA,UAAgB,QAAhB,EAAgC;AAC/B,UAAI,KAAK,GAAL,IAAY,KAAK,GAArB,EAA0B;AACzB,YAAI,KAAK,KAAL,KAAe,MAAnB,EAA2B;AAC1B,cAAI,CAAC,GAAG,KAAK,CAAC,cAAN,CAAqB,KAAK,GAA1B,EAA+B,KAAK,GAApC,EAAyC,QAAzC,CAAR;AACA,iBAAO;AAAE,YAAA,CAAC,EAAE,CAAC,CAAC,CAAP;AAAU,YAAA,CAAC,EAAE,CAAC,CAAC,CAAf;AAAkB,YAAA,KAAK,EAAE,KAAK,CAAC,QAAN,CAAe,KAAK,GAApB,EAAyB,KAAK,GAA9B;AAAzB,WAAP;AACA,SAHD,MAIK;AACJ,cAAI,EAAE,GAAG,KAAK,CAAC,wBAAN,CAA+B,KAAK,GAApC,EAAyC,KAAK,GAA9C,EAAmD;AAAE,YAAA,CAAC,EAAE,CAAL;AAAQ,YAAA,CAAC,EAAE;AAAX,WAAnD,EAAmE,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,QAAQ,GAAG,IAAvB,CAAnE,CAAT;AACA,cAAI,EAAE,GAAG,KAAK,CAAC,wBAAN,CAA+B,KAAK,GAApC,EAAyC,KAAK,GAA9C,EAAmD;AAAE,YAAA,CAAC,EAAE,CAAL;AAAQ,YAAA,CAAC,EAAE;AAAX,WAAnD,EAAmE,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,QAAQ,GAAG,IAAvB,CAAnE,CAAT;AACA,cAAI,CAAC,GAAG,KAAK,CAAC,wBAAN,CAA+B,KAAK,GAApC,EAAyC,KAAK,GAA9C,EAAmD;AAAE,YAAA,CAAC,EAAE,CAAL;AAAQ,YAAA,CAAC,EAAE;AAAX,WAAnD,EAAmE,QAAnE,CAAR;AAEA,iBAAO;AAAE,YAAA,CAAC,EAAE,CAAC,CAAC,CAAP;AAAU,YAAA,CAAC,EAAE,CAAC,CAAC,CAAf;AAAkB,YAAA,KAAK,EAAE,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,EAAnB;AAAzB,WAAP;AACA;AACD;;AACD,aAAO;AAAE,QAAA,CAAC,EAAE,CAAL;AAAQ,QAAA,CAAC,EAAE,CAAX;AAAc,QAAA,KAAK,EAAE;AAArB,OAAP;AACA;;AAtBD,EAAA,MAAA,CAAA,cAAA,CAAA,SAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,SAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,CAAC,SAAS,CAAC,SAAX,CAA3B;AAA1C,GAAA;AAsBD,SAAA,SAAA;AAAC,CAjCD,CAA+B,QAA/B,CAAA;;SAAa,S","sourcesContent":["import { FlowLink, IFlowLinkPrivate, IFlowLinkSettings } from \"./FlowLink\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { IChordNodesDataItem } from \"./ChordNodes\";\nimport type { Percent } from \"../../core/util/Percent\";\nimport type { Chord, IChordDataItem } from \"./Chord\";\nimport type { IOrientationPoint, IPoint } from \"../../core/util/IPoint\";\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IChordLinkSettings extends IFlowLinkSettings {\n\n\t/**\n\t * Source data item.\n\t */\n\tsource?: DataItem<IChordNodesDataItem>;\n\n\t/**\n\t * target data item.\n\t */\n\ttarget?: DataItem<IChordNodesDataItem>;\n\n\t/**\n\t * Radius of the link at the source.\n\t */\n\tsourceRadius?: number | Percent;\n\n\t/**\n\t * Radius of the link at the end (target).\n\t */\n\ttargetRadius?: number | Percent;\n\n}\n\nexport interface IChordLinkPrivate extends IFlowLinkPrivate {\n}\n\n/**\n * A link element used in [[Chord]] chart.\n */\nexport class ChordLink extends FlowLink {\n\n\tpublic _p0: IPoint | undefined;\n\tpublic _p1: IPoint | undefined;\n\n\tpublic _type: \"line\" | \"curve\" | undefined;\n\n\tdeclare public _settings: IChordLinkSettings;\n\tdeclare public _privateSettings: IChordLinkPrivate;\n\n\tpublic static className: string = \"ChordLink\";\n\tpublic static classNames: Array<string> = FlowLink.classNames.concat([ChordLink.className]);\n\n\tdeclare protected _dataItem: DataItem<IChordDataItem> | undefined;\n\n\tdeclare public series: Chord | undefined;\n\n\tpublic getPoint(location: number): IOrientationPoint {\n\t\tif (this._p0 && this._p1) {\n\t\t\tif (this._type === \"line\") {\n\t\t\t\tlet p = $math.getPointOnLine(this._p0, this._p1, location);\n\t\t\t\treturn { x: p.x, y: p.y, angle: $math.getAngle(this._p0, this._p1) };\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet p0 = $math.getPointOnQuadraticCurve(this._p0, this._p1, { x: 0, y: 0 }, Math.max(0, location - 0.01));\n\t\t\t\tlet p1 = $math.getPointOnQuadraticCurve(this._p0, this._p1, { x: 0, y: 0 }, Math.min(1, location + 0.01));\n\t\t\t\tlet p = $math.getPointOnQuadraticCurve(this._p0, this._p1, { x: 0, y: 0 }, location);\n\n\t\t\t\treturn { x: p.x, y: p.y, angle: $math.getAngle(p0, p1) };\n\t\t\t}\n\t\t}\n\t\treturn { x: 0, y: 0, angle: 0 };\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}