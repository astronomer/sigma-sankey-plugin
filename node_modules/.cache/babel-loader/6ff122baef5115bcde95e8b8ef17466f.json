{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"../util/Entity\";\nexport function eachChildren(container, f) {\n  if (container.get(\"reverseChildren\", false)) {\n    container.children.eachReverse(f);\n  } else {\n    container.children.each(f);\n  }\n}\n/**\r\n * Base class for [[Container]] layouts.\r\n */\n\nvar Layout =\n/** @class */\nfunction (_super) {\n  __extends(Layout, _super);\n\n  function Layout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Layout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Layout\"\n  });\n  Object.defineProperty(Layout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Entity.classNames.concat([Layout.className])\n  });\n  return Layout;\n}(Entity);\n\nexport { Layout };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/Layout.ts"],"names":[],"mappings":";AAEA,SAAS,MAAT,QAAwD,gBAAxD;AAQA,OAAM,SAAU,YAAV,CAAuB,SAAvB,EAA6C,CAA7C,EAAwE;AAC1E,MAAI,SAAS,CAAC,GAAV,CAAc,iBAAd,EAAiC,KAAjC,CAAJ,EAA6C;AACzC,IAAA,SAAS,CAAC,QAAV,CAAmB,WAAnB,CAA+B,CAA/B;AACH,GAFD,MAEO;AACH,IAAA,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAwB,CAAxB;AACH;AACJ;AAED;;AAEG;;AACH,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;AAArC,WAAA,MAAA,GAAA;;AAWC;;AAPA,EAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,MAAM,CAAC,UAAP,CAAkB,MAAlB,CAAyB,CAAC,MAAM,CAAC,SAAR,CAAzB;AAA1C,GAAA;AAMD,SAAA,MAAA;AAAC,CAXD,CAAqC,MAArC,CAAA;;SAAsB,M","sourcesContent":["import type { Container } from \"./Container\";\nimport type { Sprite } from \"./Sprite\";\nimport { Entity, IEntitySettings, IEntityPrivate } from \"../util/Entity\";\n\nexport interface ILayoutSettings extends IEntitySettings {\n}\n\nexport interface ILayoutPrivate extends IEntityPrivate {\n}\n\nexport function eachChildren(container: Container, f: (sprite: Sprite) => void): void {\n    if (container.get(\"reverseChildren\", false)) {\n        container.children.eachReverse(f);\n    } else {\n        container.children.each(f);\n    }\n}\n\n/**\n * Base class for [[Container]] layouts.\n */\nexport abstract class Layout extends Entity {\n\tdeclare public _settings: ILayoutSettings;\n\tdeclare public _privateSettings: ILayoutPrivate;\n\n\tpublic static className: string = \"Layout\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Layout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract updateContainer(_container: Container): void;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}