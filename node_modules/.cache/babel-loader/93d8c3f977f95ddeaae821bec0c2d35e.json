{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A vertical children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar VerticalLayout =\n/** @class */\nfunction (_super) {\n  __extends(VerticalLayout, _super);\n\n  function VerticalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(VerticalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingTop = container.get(\"paddingTop\", 0);\n      var availableHeight = container.innerHeight();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childHeight = child.get(\"height\");\n\n            if (childHeight instanceof Percent) {\n              totalPercent += childHeight.value;\n              var h = availableHeight * childHeight.value;\n              var minHeight = child.get(\"minHeight\", -Infinity);\n\n              if (minHeight > h) {\n                availableHeight -= minHeight;\n                totalPercent -= childHeight.value;\n              }\n\n              var maxHeight = child.get(\"maxHeight\", Infinity);\n\n              if (h > maxHeight) {\n                availableHeight -= maxHeight;\n                totalPercent -= childHeight.value;\n              }\n            } else {\n              if (!$type.isNumber(childHeight)) {\n                childHeight = child.height();\n              }\n\n              availableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n            }\n          }\n        }\n      });\n\n      if (availableHeight > 0) {\n        eachChildren(container, function (child) {\n          if (child.isVisible()) {\n            if (child.get(\"position\") == \"relative\") {\n              var childHeight = child.get(\"height\");\n\n              if (childHeight instanceof Percent) {\n                var privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n                var minHeight = child.get(\"minHeight\", -Infinity);\n                var maxHeight = child.get(\"maxHeight\", Infinity);\n                privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n                child.setPrivate(\"height\", privateHeight);\n              }\n            }\n          }\n        });\n      }\n\n      var prevY = paddingTop;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginTop = child.get(\"marginTop\", 0);\n            var marginBottom = child.get(\"marginBottom\", 0);\n            var y = prevY + marginTop - bounds.top;\n            child.setPrivate(\"y\", y);\n            prevY = y + bounds.bottom + marginBottom;\n          } else {\n            child.setPrivate(\"y\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(VerticalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"VerticalLayout\"\n  });\n  Object.defineProperty(VerticalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([VerticalLayout.className])\n  });\n  return VerticalLayout;\n}(Layout);\n\nexport { VerticalLayout };","map":{"version":3,"sources":["../../../../../src/.internal/core/render/VerticalLayout.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,EAAiB,YAAjB,QAAqC,UAArC;AACA,OAAO,KAAK,KAAZ,MAAuB,cAAvB;AACA,SAAS,OAAT,QAAwB,iBAAxB;AAIA;;;;AAIG;;AACH,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAApC,WAAA,cAAA,GAAA;;AAiFC;AA5EA;;AAEG;;;;;;;WACH,UAAuB,SAAvB,EAA2C;AAC1C,UAAI,UAAU,GAAG,SAAS,CAAC,GAAV,CAAc,YAAd,EAA4B,CAA5B,CAAjB;AAEA,UAAI,eAAe,GAAG,SAAS,CAAC,WAAV,EAAtB;AACA,UAAI,YAAY,GAAG,CAAnB;AAEA,MAAA,YAAY,CAAC,SAAD,EAAY,UAAC,KAAD,EAAM;AAC7B,YAAI,KAAK,CAAC,SAAN,EAAJ,EAAuB;AACtB,cAAI,KAAK,CAAC,GAAN,CAAU,UAAV,KAAyB,UAA7B,EAAyC;AACxC,gBAAI,WAAW,GAAG,KAAK,CAAC,GAAN,CAAU,QAAV,CAAlB;;AACA,gBAAI,WAAW,YAAY,OAA3B,EAAoC;AACnC,cAAA,YAAY,IAAI,WAAW,CAAC,KAA5B;AAEA,kBAAI,CAAC,GAAG,eAAe,GAAG,WAAW,CAAC,KAAtC;AACA,kBAAI,SAAS,GAAG,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,CAAC,QAAxB,CAAhB;;AACA,kBAAI,SAAS,GAAG,CAAhB,EAAmB;AAClB,gBAAA,eAAe,IAAI,SAAnB;AACA,gBAAA,YAAY,IAAI,WAAW,CAAC,KAA5B;AACA;;AACD,kBAAI,SAAS,GAAG,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,QAAvB,CAAhB;;AACA,kBAAI,CAAC,GAAG,SAAR,EAAmB;AAClB,gBAAA,eAAe,IAAI,SAAnB;AACA,gBAAA,YAAY,IAAI,WAAW,CAAC,KAA5B;AACA;AAED,aAfD,MAgBK;AACJ,kBAAI,CAAC,KAAK,CAAC,QAAN,CAAe,WAAf,CAAL,EAAkC;AACjC,gBAAA,WAAW,GAAG,KAAK,CAAC,MAAN,EAAd;AACA;;AACD,cAAA,eAAe,IAAI,WAAW,GAAG,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,CAAvB,CAAd,GAA0C,KAAK,CAAC,GAAN,CAAU,cAAV,EAA0B,CAA1B,CAA7D;AACA;AACD;AACD;AACD,OA5BW,CAAZ;;AA6BA,UAAI,eAAe,GAAG,CAAtB,EAAyB;AACxB,QAAA,YAAY,CAAC,SAAD,EAAY,UAAC,KAAD,EAAM;AAC7B,cAAI,KAAK,CAAC,SAAN,EAAJ,EAAuB;AACtB,gBAAI,KAAK,CAAC,GAAN,CAAU,UAAV,KAAyB,UAA7B,EAAyC;AACxC,kBAAI,WAAW,GAAG,KAAK,CAAC,GAAN,CAAU,QAAV,CAAlB;;AAEA,kBAAI,WAAW,YAAY,OAA3B,EAAoC;AACnC,oBAAI,aAAa,GAAG,eAAe,GAAG,WAAW,CAAC,KAA9B,GAAsC,YAAtC,GAAqD,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,CAAvB,CAArD,GAAiF,KAAK,CAAC,GAAN,CAAU,cAAV,EAA0B,CAA1B,CAArG;AAEA,oBAAI,SAAS,GAAG,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,CAAC,QAAxB,CAAhB;AACA,oBAAI,SAAS,GAAG,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,QAAvB,CAAhB;AACA,gBAAA,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,SAAT,EAAoB,aAApB,CAAT,EAA6C,SAA7C,CAAhB;AAEA,gBAAA,KAAK,CAAC,UAAN,CAAiB,QAAjB,EAA2B,aAA3B;AACA;AACD;AACD;AACD,SAhBW,CAAZ;AAiBA;;AAED,UAAI,KAAK,GAAG,UAAZ;AAEA,MAAA,YAAY,CAAC,SAAD,EAAY,UAAC,KAAD,EAAM;AAC7B,YAAI,KAAK,CAAC,GAAN,CAAU,UAAV,KAAyB,UAA7B,EAAyC;AACxC,cAAI,KAAK,CAAC,SAAN,EAAJ,EAAuB;AACtB,gBAAI,MAAM,GAAG,KAAK,CAAC,mBAAN,EAAb;AACA,gBAAI,SAAS,GAAG,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,CAAvB,CAAhB;AACA,gBAAI,YAAY,GAAG,KAAK,CAAC,GAAN,CAAU,cAAV,EAA0B,CAA1B,CAAnB;AACA,gBAAI,CAAC,GAAG,KAAK,GAAG,SAAR,GAAoB,MAAM,CAAC,GAAnC;AACA,YAAA,KAAK,CAAC,UAAN,CAAiB,GAAjB,EAAsB,CAAtB;AACA,YAAA,KAAK,GAAG,CAAC,GAAG,MAAM,CAAC,MAAX,GAAoB,YAA5B;AACA,WAPD,MAQK;AACJ,YAAA,KAAK,CAAC,UAAN,CAAiB,GAAjB,EAAsB,SAAtB;AACA;AACD;AACD,OAdW,CAAZ;AAeA;;AA9ED,EAAA,MAAA,CAAA,cAAA,CAAA,cAAA,EAAA,WAAA,EAAA;oBAAA;sBAAA;kBAAA;WAAkC;AAAlC,GAAA;AACA,EAAA,MAAA,CAAA,cAAA,CAAA,cAAA,EAAA,YAAA,EAAA;oBAAA;sBAAA;kBAAA;WAA0C,MAAM,CAAC,UAAP,CAAkB,MAAlB,CAAyB,CAAC,cAAc,CAAC,SAAhB,CAAzB;AAA1C,GAAA;AA8ED,SAAA,cAAA;AAAC,CAjFD,CAAoC,MAApC,CAAA;;SAAa,c","sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n\n/**\n * A vertical children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class VerticalLayout extends Layout {\n\n\tpublic static className: string = \"VerticalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([VerticalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\t\tlet paddingTop = container.get(\"paddingTop\", 0);\n\n\t\tlet availableHeight = container.innerHeight();\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childHeight = child.get(\"height\");\n\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childHeight.value;\n\n\t\t\t\t\t\tlet h = availableHeight * childHeight.value;\n\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", -Infinity);\n\t\t\t\t\t\tif (minHeight > h) {\n\t\t\t\t\t\t\tavailableHeight -= minHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", Infinity);\n\t\t\t\t\t\tif (h > maxHeight) {\n\t\t\t\t\t\t\tavailableHeight -= maxHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childHeight)) {\n\t\t\t\t\t\t\tchildHeight = child.height();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tif (availableHeight > 0) {\n\t\t\teachChildren(container, (child) => {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\t\tlet childHeight = child.get(\"height\");\n\n\t\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\t\tlet privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n\n\t\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", -Infinity);\n\t\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", Infinity);\n\t\t\t\t\t\t\tprivateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n\n\t\t\t\t\t\t\tchild.setPrivate(\"height\", privateHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet prevY = paddingTop;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginTop = child.get(\"marginTop\", 0);\n\t\t\t\t\tlet marginBottom = child.get(\"marginBottom\", 0);\n\t\t\t\t\tlet y = prevY + marginTop - bounds.top;\n\t\t\t\t\tchild.setPrivate(\"y\", y);\n\t\t\t\t\tprevY = y + bounds.bottom + marginBottom;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchild.setPrivate(\"y\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}