{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Chord } from \"./Chord\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * Chord series with think line links.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/flow-charts/} for more information\r\n * @important\r\n */\n\nvar ChordNonRibbon =\n/** @class */\nfunction (_super) {\n  __extends(ChordNonRibbon, _super);\n\n  function ChordNonRibbon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(ChordNonRibbon.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"chord\", \"basic\"]);\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(ChordNonRibbon.prototype, \"_makeMatrix\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var matrix = [];\n      $array.each(this.nodes.dataItems, function (sourceDataItem) {\n        var group = [];\n        matrix.push(group);\n        $array.each(_this.nodes.dataItems, function (targetDataItem) {\n          var value = 1;\n\n          if (sourceDataItem === targetDataItem) {\n            value = 0;\n          }\n\n          group.push(value);\n        });\n      });\n      return matrix;\n    }\n  });\n  Object.defineProperty(ChordNonRibbon.prototype, \"_updateLink\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (_ribbon, link, _linkRadius, chordLayoutItem) {\n      link._type = this.get(\"linkType\");\n\n      if (chordLayoutItem) {\n        var linkType_1 = this.get(\"linkType\");\n        link.set(\"draw\", function (display) {\n          var p0 = link._p0;\n          var p1 = link._p1;\n\n          if (p0 && p1) {\n            display.moveTo(p0.x, p0.y);\n\n            if (linkType_1 == \"line\") {\n              display.lineTo(p1.x, p1.y);\n            } else {\n              display.quadraticCurveTo(0, 0, p1.x, p1.y);\n            }\n          }\n        });\n      }\n    }\n  });\n  Object.defineProperty(ChordNonRibbon.prototype, \"_getLinkPoints\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (link, linkRadius, _chordLayoutItem) {\n      var source = link.get(\"source\");\n      var target = link.get(\"target\");\n\n      if (source && target) {\n        var sourceSlice = source.get(\"slice\");\n        var targetSlice = target.get(\"slice\");\n        var startAngle0 = sourceSlice.get(\"startAngle\", 0);\n        var arc0 = sourceSlice.get(\"arc\", 0);\n        var angle0 = startAngle0 + arc0 / 2;\n        var startAngle1 = targetSlice.get(\"startAngle\", 0);\n        var arc1 = targetSlice.get(\"arc\", 0);\n        var angle1 = startAngle1 + arc1 / 2;\n        link._p0 = {\n          x: linkRadius * $math.cos(angle0),\n          y: linkRadius * $math.sin(angle0)\n        };\n        link._p1 = {\n          x: linkRadius * $math.cos(angle1),\n          y: linkRadius * $math.sin(angle1)\n        };\n      }\n    }\n  });\n  Object.defineProperty(ChordNonRibbon, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ChordNonRibbon\"\n  });\n  Object.defineProperty(ChordNonRibbon, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Chord.classNames.concat([ChordNonRibbon.className])\n  });\n  return ChordNonRibbon;\n}(Chord);\n\nexport { ChordNonRibbon };","map":{"version":3,"sources":["../../../../../src/.internal/charts/flow/ChordNonRibbon.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ChordLink } from \"./ChordLink\";\nimport type { RibbonGenerator, RibbonSubgroup, Ribbon } from \"d3-chord\";\n\nimport { Chord, IChordSettings, IChordDataItem, IChordPrivate, IChordEvents } from \"./Chord\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IChordNonRibbonDataItem extends IChordDataItem {\n\n}\n\nexport interface IChordNonRibbonSettings extends IChordSettings {\n\n\t/**\n\t * Type of the link:\n\t *\n\t * `\"curve\"` (default) will display link as a curved line.\n\t * `\"line\"` will display link as a straight line.\n\t *\n\t * @default \"curve\"\n\t */\n\tlinkType?: \"curve\" | \"line\"\n\n}\n\nexport interface IChordNonRibbonPrivate extends IChordPrivate {\n}\n\nexport interface IChordNonRibbonEvents extends IChordEvents {\n}\n\n/**\n * Chord series with think line links.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/flow-charts/} for more information\n * @important\n */\nexport class ChordNonRibbon extends Chord {\n\n\tpublic static className: string = \"ChordNonRibbon\";\n\tpublic static classNames: Array<string> = Chord.classNames.concat([ChordNonRibbon.className]);\n\n\tdeclare public _settings: IChordNonRibbonSettings;\n\tdeclare public _privateSettings: IChordNonRibbonPrivate;\n\tdeclare public _dataItemSettings: IChordNonRibbonDataItem;\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"chord\", \"basic\"]);\n\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _makeMatrix(): number[][] {\n\t\tconst matrix: number[][] = [];\n\t\t$array.each(this.nodes.dataItems, (sourceDataItem) => {\n\t\t\tconst group: number[] = [];\n\t\t\tmatrix.push(group);\n\n\t\t\t$array.each(this.nodes.dataItems, (targetDataItem) => {\n\t\t\t\tlet value = 1;\n\n\t\t\t\tif (sourceDataItem === targetDataItem) {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\n\t\t\t\tgroup.push(value);\n\t\t\t})\n\t\t})\n\t\treturn matrix;\n\t}\n\n\tprotected _updateLink(_ribbon: RibbonGenerator<any, Ribbon, RibbonSubgroup>, link: ChordLink, _linkRadius: number, chordLayoutItem: any) {\n\t\tlink._type = this.get(\"linkType\");\n\t\tif (chordLayoutItem) {\n\t\t\tconst linkType = this.get(\"linkType\");\n\n\t\t\tlink.set(\"draw\", (display) => {\n\t\t\t\tlet p0 = link._p0;\n\t\t\t\tlet p1 = link._p1;\n\t\t\t\tif (p0 && p1) {\n\t\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\t\t\t\t\tif (linkType == \"line\") {\n\t\t\t\t\t\tdisplay.lineTo(p1.x, p1.y);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdisplay.quadraticCurveTo(0, 0, p1.x, p1.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getLinkPoints(link: ChordLink, linkRadius: number, _chordLayoutItem: any) {\n\t\tconst source = link.get(\"source\");\n\t\tconst target = link.get(\"target\");\n\n\t\tif (source && target) {\n\n\t\t\tconst sourceSlice = source.get(\"slice\");\n\t\t\tconst targetSlice = target.get(\"slice\");\n\n\t\t\tconst startAngle0 = sourceSlice.get(\"startAngle\", 0);\n\t\t\tconst arc0 = sourceSlice.get(\"arc\", 0)\n\t\t\tconst angle0 = startAngle0 + arc0 / 2;\n\n\t\t\tconst startAngle1 = targetSlice.get(\"startAngle\", 0);\n\t\t\tconst arc1 = targetSlice.get(\"arc\", 0)\n\t\t\tconst angle1 = startAngle1 + arc1 / 2;\n\n\t\t\tlink._p0 = { x: linkRadius * $math.cos(angle0), y: linkRadius * $math.sin(angle0) };\n\t\t\tlink._p1 = { x: linkRadius * $math.cos(angle1), y: linkRadius * $math.sin(angle1) };\n\t\t}\n\t}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}